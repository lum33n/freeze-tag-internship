from math import pi, atan2, sin, cos, ceil, floor, sqrt
from functools import lru_cache
from sys import setrecursionlimit
from time import process_time
from random import random, randrange, seed, vonmisesvariate
from xml.etree.ElementTree import PI
import matplotlib.pyplot as plt
import matplotlib as mpl

# enl√®ve les marques dans la l√©gende des graphiques
mpl.rcParams['legend.markerscale'] = 0
mpl.rcParams['legend.frameon'] = False

# fixe la profondeur max des r√©cursions pour @lru_cache()
setrecursionlimit(10*8) # ne pas mettre trop, sinon "segmentation fault"

"""
DEFINITIONS

Un arbre enracin√© T est une liste [ r, T_1, ..., T_k ] o√π r est la racine et T_i est le i-√®me fils, lui-m√™me un arbre enracin√©. Donc [ r ] est le plus petit arbre possible, et [ r, [u], [v] ] est un arbre avec seulement deux fils (ici des feuilles u et v). Un arbre enracin√© T sur une liste P de points est simplement un arbre enracin√© dont les sommets sont des indices de P.
"""


#########################
#
# Fonctions de distances
#
#########################

def dist_L2(p,q):
    """
    Renvoie la distance euclidienne entre les points p et q, un point √©tant un couple ou une liste √† deux √©l√©ments.
    """
    return sqrt( (p[0]-q[0])**2 + (p[1]-q[1])**2 )

def dist_L1(p,q):
    """
    Comme dist_L2(p,q) mais pour la distance L1.
    """
    return abs(p[0]-q[0]) + abs(p[1]-q[1])

def dist_Linf(p,q):
    """
    Comme dist_L2(p,q) mais pour la distance L‚àû.
    """
    return max(abs(p[0]-q[0]), abs(p[1]-q[1]))

def dist_Lp(p,q):
    """
    Comme dist_L2(p,q) mais pour la distance selon la norme L_p d√©finie par LP_NORM.
    """
    return ( abs(p[0]-q[0])**LP_NORM + abs(p[1]-q[1])**LP_NORM )**(1/LP_NORM)

def dist_radius(p,q):
    """
    Comme dist_Lp(p,q) mais avec un rayon d'approximation d√©fini par RADIUS. NB: Si RADIUS = 0, c'est exactement dist_Lp(p,q). Si RADIUS>0, alors il est possible que la distance d√©passe le diam√®tre, que l'on borne par une variable locale 
    """
    if p == q: return RADIUS
    return min( dist_Lp(p,q) + 2*RADIUS, DIAMETER)

# @cache # plus rapide, mais √† partir de Python 3.9
@lru_cache(maxsize=None)
def dist(i,j):
    """
    calcule la distance (DIST) entre les points (POINTS) d'indices i et j.
    """
    return DIST(POINTS[i],POINTS[j])

@lru_cache(maxsize=None)
def chord(t):
    """
    Longueur de la corde d'un cercle de rayon unit√© avec N>0 points plac√©s r√©guli√®rement et liant le point d'indice 0 au point d'indice t. Sert essentiellement √† segment_cm() et segment_c(). Normalement, c'est pareil que dist_L2( (1,0), (cos(t*2*pi/N),sin(t*2*pi/N)) ).
    """
    return 2 * sin(t * pi / N)


#############################################################
#
# Variables globales pour √©viter des passages de param√®tres
# et qui deviennent n√©cessaires dans les fonctions r√©cursives
# avec @lru_cache().
#
#############################################################

N = 0 # nombre de points, g√©n√©ralement sans le robot r√©veill√©, pour chord()
DIST = dist_L2 # fonction de distance par d√©faut, pour dist()
POINTS = []  # ensemble de points, pour dist()
ROOT = 0 # indice dans POINTS de la source, le robot initialement r√©veill√©
UPPER_BOUND = -1 # borne sup√©rieure utiliser dans les algos (peut d√©pendre de la fonction de distance, de l'excentricit√© de l'ensemble des points, de l'algorithme, ...)
SEED = None # sert pour r√©cup√©rer la seed 
PROCESS_TIME = 0 # temps √©coul√© en seconde pour affichage dans draw_all
RADIUS = 0 # rayon d'approximation pour la distance dist_radius()
DIAMETER = 2 # diam√®tre par d√©faut pour la distance dist_radius()

##############################################
#
# Divers: eccentricity(), diameter(), depth()
# 
##############################################

def eccentricity(r=None, P=None, d=None):
    """
    Calcule l'excentricit√© du point P[r] dans P selon la fonction de distance d.

    Variables globales modifi√©es: POINTS, DIST (pour dist())
    """
    global POINTS, DIST # important pour dist()
    if r == None: r = ROOT # valeur par d√©faut ne marche pas sinon
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    POINTS, DIST = P, d # fixe les valeurs pour dist()

    x = 0 # valeur √† renvoyer
    for v in range(len(P)): # pour tous les points
        x = max(x,dist(r,v))
    return x

def diameter(P=None, d=None):
    """
    Calcule le diam√®tre de la liste de points P selon la fonction de distance d. On ne suppose pas de sym√©trie pour d.

    Variables globales modifi√©es: POINTS, DIST (via eccentricity())
    """
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon

    x = 0 # valeur √† renvoyer
    for r in range(len(P)): # pour tous les points
        x = max(x,eccentricity(r,P,d))
    return x

def depth(T, P=None, d=None):
    """
    Calcule la profondeur d'un arbre enracin√© T sur P selon la fonction de distance d.

    Variables globales modifi√©es: POINTS, DIST (pour dist())
    """
    global POINTS, DIST # important pour dist()
    if P == None: P = POINTS # valeur par d√©faut ne marche pas
    if d == None: d = DIST # valeur par d√©faut ne marche pas
    POINTS, DIST = P, d # fixe les valeurs pour dist()

    if len(P) == 0 or len(T) <= 1: return 0
    r = T[0] # racine de T
    if r < 0 or r >= len(P): return 0 # point en dehors de P

    x = 0 # # valeur √† renvoyer
    for i in range(1,len(T)): # pour chaque sous-arbre de T
        f = T[i] # i-√®me fils de T
        x = max(x, dist(r,f[0]) + depth(f,P,d))
    return x


##########################
#
# Distributions de points
#
##########################

def init_seed(n=None):
    """
    Fixe ou pas la seed √† n. Cela permet d'initialiser le g√©n√©rateur avec la valeur de la seed utilis√©e lors du dernier appel √† init_seed. Attention ! Il ne faut pas appeler cette fonction trop souvent, puisqu'il ne peut y avoir que 10000 initialisations diff√©rentes.
    """
    global SEED
    SEED = randrange(10000) if n == None else n
    seed(SEED)

def generate_regular_polygon(n, r=1, c=(0,0)):
    """
    G√©n√®re une liste de n points plac√©s r√©guli√®rement sur un cercle de rayon r et centr√© en c, c'est-√†-dure un n-gone r√©gulier. Les points sont ordonn√©s selon le sens direct.
    """
    P = [] # liste √† renvoyer
    if n > 0: theta = 2*pi/n # utilis√© que si n>0
    for i in range(n): # r√©p√©ter n fois
        P += [ (c[0]+r*cos(i*theta), c[1]+r*sin(i*theta)) ]
    return P

def generate_von_mises(n, p=0.5, k=1, f=0):
    """
    G√©n√®re une liste de n points al√©atoires dans le disque centr√© sur l'origine o√π la distance au centre vaut x^p avec x uniforme sur [0,1] et o√π l'angle suit une loi normale circulaire (plus exactement de von Mises) d'angle moyen a_i = i*2ùúã/k o√π i est un entier uniforme sur [0,k[. Il faut k >= 1. Le param√®tre f est reli√© √† l'√©cart type de l'angle par rapport √† la direction a_i. Plus pr√©cis√©ment, on pose comme √©cart type la valeur sigma = (a_{i+1} - a_i)/(2f) = ùúã/(k*f). Donc plus f est grand, plus les angles sont concentr√©s en a_i. Puis, on s'arrange pour que l'√©cart type de la loi de von Mises corresponde √† sigma. Pour cela on pose le param√®tre de la loi kappa = 1/sigma^2, ce qui est une tr√®s bonne approximation (cf. https://dlwhittenbury.github.io/ds-1-sampling-and-visualising-the-von-mises-distribution.html).
    
    Si p=0, alors la distance est unitaire, et donc les points sont tous sur le cercle unit√©. Si f=0, alors la distribution de l'angle sera uniforme (variance infinie), quelque soit la valeur de k. Si f=+‚àû (ou toute valeur f<0), alors la variance sera nulle (kappa=+‚àû) et les angles possibles seront uniquement des a_i. Mettre k=0 pour indiquer k=+‚àû, ce qui aura un effet similaire √† poser f=0.
    
    Faire attention au fait que p=0.5 ne donne pas forc√©ment une distribution uniforme sur la "fleur", c'est-√†-dire le disque d√©form√© par les k directions, en particulier lorsque k est petit et f assez grand.

    Ex:
    - generate_von_mises(n,0) -> pts al√©atoires unif. sur le cercle
    - generate_von_mises(n,0.5) -> pts al√©atoires unif. sur le disque
    - generate_von_mises(n,1,k,-1) -> pts al√©atoires unif sur une √©toile √† k branches
    - generate_von_mises(n,0.1,k,3) -> pts al√©atoires concentr√©s vers les k directions
    - generate_von_mises(n,-0.1,k,3) -> idem mais √† l'ext√©rieur du cercle

    Attention ! Les points ne sont pas g√©n√©ralement ordonn√©s selon l'angle √† l'origine. Pour le faire il faut faire (par exemple):

        P = generate_von_mises(...)
        P.sort(key=lambda A:atan2(*A))

    """
    P = [] # liste √† renvoyer
    if f < 0: kappa = float("inf") # une distribution uniforme (variance +‚àû)
    else: kappa = (k*f/pi)**2 # un √©cart type en ùúã/(kf)
    if k == 0: k,kappa = 1,float("inf")

    for _ in range(n): # r√©p√©ter n fois
        i = randrange(k) # une des k directions al√©atoires
        a = vonmisesvariate(i*2*pi/k,kappa) # angle al√©atoire autour de la direction choisie
        x = random()**p # distance al√©atoire uniforme dans [0,1]
        P += [ (x*cos(a), x*sin(a)) ] # ajoute le nouveau point √† la fin

    return P

def generate_convex(n):
    """
    G√©n√®re une liste de n points al√©atoire en positions convexe. L'algorithme est en O(n*log(n)). Cela ne marche que pour la norme L2. Pour les autres normes il faudrait remplacer le tri selon l'angle (avec atan(y/x)) par une fonction/notion ad√©quate. On pourrait dire qu'un ensemble de points est en position convexe s'il existe un ordre des points tel que tout plus court chemin (selon la m√©trique d) entre u et v est √† l'int√©rieur de la r√©gion d√©limit√© par cette liste ordonn√©e de points. Ceci dit, j'ai l'impression qu'un ensemble est convex est une notion ind√©pendante de la m√©trique: s'il est convexe pour d, il l'est aussi pour d', car c'est li√© √† la notion d'int√©rieur.

    PRINCIPE.
    
        On part d'une liste de n points al√©atoires dans [0,1[¬≤, puis on calcule la diff√©rence (donc le vecteur) entre deux points cons√©cutifs. La somme des n vecteurs est nulle. On trie ces vecteurs selon l'angle, puis on dessine de proche en proche les points de l'enveloppe convexe (avec chaque fois un angle croissant donc).
    """
    P = []
    for _ in range(n): # n points al√©atoires dans [0,1[¬≤
        P += [(random(), random())]
    
    for i in range(n-1): # calcule les diff√©rences
        P[i] = (P[i][0] - P[(i+1)%n][0], P[i][1] - P[(i+1)%n][1])

    P.sort(key=lambda A: atan2(*A)) # tri selon les angles

    for i in range(1,n): # positions finales
        P[i] = (P[i][0] + P[i-1][0], P[i][1] + P[i-1][1])

    return P

def normalize_bc(P=None, d=None):
    """
    Modifie une liste de points P en ajoutant √† sa fin leur barycentre et telle que l'excentricit√© depuis ce barycentre vaut 1. ROOT est modifi√©e pour qu'elle corresponde alors √† ce barycentre. Les points de P sont d'abord recentr√©s pour que le barycentre soit plac√©s √† l'origine (0,0), puis les coordonn√©es sont mis √† l'√©chelle pour que l'excentricit√© de ce point soit 1. Les distances relatives sont pr√©serv√©es si la fonction de distance d est lin√©aire, c'est-√†-dire si d(t*A+C,t*B+C) = d(A,B) pour tout points A,B,C et r√©els t>0. C'est le cas des normes, comme L_p.

    Variables globales modifi√©es: POINTS et DIST √† cause de eccentricity(), ROOT
    """
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    dist.cache_clear() # important pour eccentricity()

    # calcule le barycentre (sx,sy)
    n = len(P)
    if n == 0: return # rien √† faire dans ce cas
    x = y = 0 # barycentre
    for i in range(n): # pour tous les points de P
        x,y = x+P[i][0], y+P[i][1]
    x,y = x/n, y/n
    global ROOT
    ROOT = n # modifie la racine
    P += [(x,y)] # ajoute le barycentre en fin de liste
    ex = eccentricity(ROOT,P,d) # calcule l'excentricit√© du barycentre
    if ex == 0: ex = 1 # dans ce cas, on met tous les points √† (0,0)
    for i in range(n+1): # transforme aussi le barycentre
        P[i] = ((P[i][0]-x)/ex, (P[i][1]-y)/ex)
    return


############################################
#
# Fonctions de dessins: points, arbres, ...
#
############################################

def draw_points(P, c='gray', s=5, m='o'):
    """
    Dessine un ensemble de points P de forme m, de couleur c et de taille s dans le dessin plt courant. Pour un simple affichage des points, il faut √† minima faire un plt.show() ou bien faire draw_all().
    """
    for (x,y) in P:
        plt.plot([x], [y], color = c, marker = m, ms = s, ls = 'none')

def draw_tree(T, P=None, c_edge='blue', w=0.005, arc=False, pts=True, c_pts='red', s=5, long=False, c_long='green'):
    """
    Dessine r√©cursivement un arbre T enracin√© sur une liste de points P.

    c_edge = couleur des ar√™tes
    w = √©paisseur des ar√™tes
    arc = arc du p√®re vers les fils (True) ou ar√™te simple (False)
    pts = dessine les points de l'arbre (True) ou pas (False)
    c_pts = couleur des points (si pts=True)
    s = taille des points (si pts=True)
    long = dessine les ar√™tes/arcs de la (ou les) branche la plus longue (selon DIST)
    c_long = couleurs des branches les plus longues

    Variable globale modifi√©e (si long=True): POINTS (pour dist())
    """
    if long:
        global POINTS
        if P == None: P = POINTS
        POINTS = P
    if len(P) == 0 or len(T) == 0: return # rien √† faire dans ces cas
    r = T[0] # racine
    if r<0 or r>len(P): return # indice en dehors de P
    r = P[r] # r = coordonn√©es de la racine
    if pts: # dessine la racine r
        plt.plot([r[0]], [r[1]], color = c_pts, marker = 'o', ms = s, ls = 'none')
    hl, hw = (0.1, 0.05) if arc else (0,0) # longueur et largeur des arcs
    if long: ex = depth(T) # excentricit√© de r

    for i in range(1,len(T)): # pour chaque sous-arbre

        # dessine r√©cursivement le sous-arbre T[i]
        draw_tree(T[i],P,c_edge,w,arc,pts,c_pts,s,long,c_long)

        # dessine l'arc entre la racine r et son sous-arbre T[i]
        f = T[i][0] # racine du fils
        if f<0 or f>len(P): return # indice en dehors de P
        c = c_long if long and ex == dist(T[0],f) + depth(T[i]) else c_edge # si branche longue
        f = P[f] # coordonn√©es de f
        lss, col = (':','orange') if T[0] == ROOT else ('-',c) # pointill√© pour la 1√®re ar√™te
        plt.arrow(r[0], r[1], f[0]-r[0], f[1]-r[1], color = col, width = w, head_width = hw, head_length = hl, length_includes_head = True, ls = lss, overhang = .2)

def draw_all(title=None, x=None, T=None, P=None, d=None):
    """
    Dessine et affiche une solution x ainsi qu'un arbre enracin√© T sur un ensemble de points P, title √©tant juste un commentaire. Calcule et affiche aussi la profondeur de T selon la fonction de distance d. Un simple appel √† draw_all() affiche les points de POINTS, son excentricit√© et son diam√®tre. En posant ROOT=None, on emp√™che de distinguer la racine des autres points et le calcule le son l'excentricit√©. Attention ! PROCESS_TIME est remis √† z√©ro. Pour ne pas afficher la ligne avec 'time', mettre PROCESS_TIME = 0. Pour ne pas afficher la ligne 'seed', mettre SEED = -1.

    Variables globales modifi√©es: POINTS, DIST (via eccentricity()), PROCESS_TIME
    """
    global PROCESS_TIME
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    dist.cache_clear() # important pour dist(), eccentricity() et diameter()

    n = len(P) # nombre de points
    s = max(1,6 - floor(n/50)) # taille variables des points
    w = s/1000 # √©paisseur variable des ar√™tes
    arc = True if n < 60 else False # orientation ou pas des ar√™tes ?
    r = ROOT if T == None else T[0] # racine, √©ventuellement de l'arbre s'il existe

    plt.clf() # efface le dessin
    plt.axis('off') # enl√®ve les axes
    plt.axis('equal') # aspect ratio: pour avoir des cercles en forme de cercle

    # NB: les objets sont affich√©s les uns au-dessus des autres, donc on dessine la racine en dernier pour la voir m√™me s'il y a beaucoup de points

    draw_points(P,'gray',s) # dessine les points en gris et de taille s
    if T != None: # si l'arbre existe ...
        draw_tree(T,P,'blue',w,arc,True,'red',s,True) # dessine l'arbre
    if ROOT != None: # dessine la racine
        draw_points([P[r]],'orange',1.8*s,'X') # dessine la racine

    # calcule la l√©gende √† afficher 
    L = []; t = ""
    if title != None: t += title
    if x != None: t += f" = {x:.3f}"
    if t != "": L += [t]
    if T != None: L += [f"depth = {depth(T,P,d):.3f}"]
    L += [f"#pts = {n}"]
    L += [f"diam = {diameter(P,d):.3f}"]
    if ROOT != None: L += [f"ecc = {eccentricity(r,P,d):.3f}"]
    if PROCESS_TIME > 0:
        L += [f"time = {PROCESS_TIME:.3f}s"]
        PROCESS_TIME = 0 # pour √©viter de r√©-afficher le m√™me temps encore et toujours
    if SEED >= 0: L += [f"seed = {SEED}"]

    plt.figlegend(L) # ajoute la l√©gende L
    plt.show() # affiche le dessin
    return


##############################################
#
# ALGORITHMES:
#
#  - SEGMENT_CM(n)
#  - SEGMENT_C(n)
#  - SEGMENT(P,d)
#  - GREEDY_SEGMENT(P,d)
#
##############################################

"""
Les algorithmes SEGMENT_CM et SEGMENT_C d√©rivent de l'algorithme g√©n√©ral SEGMENT qui donnent des arbres optimaux parmi ceux d'une certaine classe. Ils sont d√©di√©s et optimis√©s pour les polygones r√©guliers (C = circle et M = monotone, on ne revient pas en arri√®re). L'algorithme SEGMENT est plus g√©n√©ral et s'applique √† n'importe quelle liste ordonn√©e de points et n'importe quelle fonction de distance (a priori m√©trique pour acc√©l√©rer un peu, mais on pourrait s'en passer, c'est indiqu√© dans le code o√π l'on s'en sert). On peut retrouver le r√©sultat de SEGMENT_C directement avec SEGMENT et une liste de points ad√©quate, mais c'est plus long.

L'algorithme SEGMENT donne l'arbre optimal de sorte que les points de chaque sous-arbre forment un ensemble de points cons√©cutifs dans la liste ordonn√©e de points donn√©e en param√®tre. Il est en fait un cas particulier de l'algorithme OPTIMAL dans le cas o√π un ordre cyclique doit √™tre respect√©. L'algorithme est en O(n^8) une fois donn√©es cette liste et la fonction de distance. On remarque que si les points sont en position convexe, alors l'arbre produit par SEGMENT (et ses variantes) est n√©cessairement planaire (sauf peut-√™tre pour la premi√®re ar√™te car, avec source, les points ne forment plus un ensemble convexe). Inversement, si les points sont en position convexe, SEGMENT donnera la meilleure solution planaire possible (sauf possiblement la premi√®re ar√™te). Malheureusement, il existe des points en position convexe o√π la solution optimale n'est pas planaire (en dehors de la 1√®re ar√™te). Une propri√©t√© int√©ressante de cet algorithme est la suivante:

PROPOSITION (optimalit√© de SEGMENT). Pour tout ensemble de points, il existe un ordre sur P tel que SEGMENT(P) donne la solution optimale.

Donc pour d√©crire une solution optimale, quelle que soit la m√©trique, il suffit de d√©crire une permutation des points, l'arbre √©tant implicite et pouvant √™tre retrouv√© en temps polynomial. Cela vient du fait que pour tout arbre optimal, l'ordre DFS donnera bien s√ªr un arbre √©tiquet√© de la classe o√π SEGMENT cherche l'optimal. Notons en passant que le nombre d'arbres de cette classe est environ 2^n (il y a au plus deux intervalles possibles si l'arbre √† deux fils, qui r√©cursivement fait 2^n √©tiquetages possibles). La proposition ci-dessus justifie √©galement l'algorithme GREEDY_SEGMENT qui, √† l'instar du TSP, essaye de trouver un bon ordre pour P.

NB1. Est-il possible de relier le r√©sultat de SEGMENT √† la longueur de la tourn√©e g√©n√©r√©e POINTS ? Existe-il un algorithme polynomial pour g√©n√©rer un TSP assez court sur un ensemble de POINTS de rayon unit√© ? Malheureusement la longueur de la tourn√©e optimale n'est pas constante m√™me pour des points de rayon unit√©. En effet, le th√©or√®me de Beardwood-Halton-Hammersley dit que pour des points al√©atoires uniformes le carr√© [0,1]¬≤, le TSP est en b*sqrt(n) o√π b est une constante ~ 0.74.

NB2. On √† l'impression (√† prouver) qu'√† longueur de tourn√©e fix√©e (ou longueur de chemin), disons L, le temps pour SEGMENT sera maximis√© lorsque la distance moyenne entre les points est maximis√©e, soit sur le cercle. C'est pas tr√®s clair car un mauvais exemple est lorsque les points sont align√©s avec un point de d√©part au mileu et tous les points situ√©s √† distance L/2 de part et d'autres de s.

Pour revenir aux points en position convexe, on peut quand m√™me se demander si une g√©n√©ralisation de SEGMENT relativement simple (cf. ci-apr√®s) ne permettrait pas d'avoir un algorithme polynomial. On s'int√©resse aux arbres tels que les points de chaque sous-arbre forment un ensemble d'au plus k segments cons√©cutifs de points dans la liste. Notons MULTI_SEGMENT(k,P,d) la g√©n√©ralisation de SEGMENT(P,d), ce dernier algorithme traitant du cas k = 1. Il faut remarquer que MULTI_SEGMENT peut s'impl√©menter en n^O(k), l'id√©e √©tant que les ensembles correspondant √† chaque sous-arbres peuvent se d√©crire avec 2k entiers de log(n) bits. Le nombre d'appels va donc √™tre en n^{2k+O(1)} en utilisant une bonne table de hachage. Bref, la seule question pertinente est de savoir si une solution optimale peut avoir beaucoup de trous dans ses sous-arbres. On ne voit pas trop l'int√©r√™t d'avoir une solution optimale avec plus qu'un trou par exemple. Une autre fa√ßon de voir est de se demander s'il est possible dans une solution optimale d'avoir des branches (ou plut√¥t si on ne peut pas toujours √©viter d'avoir des branches) qui font beaucoup de zigzags entre les parois du convexe. La notion de zigzags est un peu flou, mais on voit l'id√©e: √©tant donn√© une ar√™te u-v, le convexe est coup√© en deux parties (convexes). Peut-il avoir une branche disons issue de v qui passe d'une partie √† l'autre un nombre non constant de fois, c'est-√†-dire qui coupe l'ar√™te u-v autant de fois que souhait√©e ? L'in√©galit√© triangulaire pourrait l'emp√™cher. Si oui, cela resterait donc vrai aussi pour toute m√©trique, car il me semble que la notion d'ensemble convexe est ind√©pendant de la m√©trique (cf. generate_convex()).

Une autre g√©n√©ralisation est de param√©trer le niveau de convexit√© de la liste ordonn√©e. En gros, lorsque l'ensemble est convexe, la tangente qui suit le convexe est monotone (croissante si on tourne dans le sens direct). Disons qu'elle varie de -x √† +x. Mais on pourrait imaginer des variations plus complexes de -x √† +x en passant par b pics (ou vall√©es, b=0 si convexe). L'intuition est qu'il devrait toujours √™tre possible d'avoir un solution optimale o√π le nombre de segments est une fonction du param√®tre b, ce qui serait une super chouette g√©n√©ralisation du cas convexe qu'on a pas prouv√©. Une param√©trisation possible est le nombre de couches d'un ensemble de points, obtenu en √©pluchant l'ensemble successivement par enveloppe convexe.
"""

@lru_cache(maxsize=None)
def segment_cm(k):
    """
    On suppose qu'on est sur un cercle avec N >= 3 points plac√©s r√©guli√®rement et qu'un point du cercle poss√®de deux robots r√©veill√©s. La fonction renvoie alors le temps pour que ces deux robots r√©veillent les k >= 0 autres robots suivants selon la strat√©gie suivante: un des deux robots se charge du suivant tant dit que l'autre fait un saut de longueur t >= 2, param√®tre t qu'il faut optimiser dans [2,k]. Le temps renvoy√© est le max pris par les deux robots et minimiser sur t. Les robots r√©veill√©s recommencent alors r√©cursivement la strat√©gie.

    La fonction renvoie √©galement un arbre relatif du type [0], [1, [0]] ou [1, T1, t, T2], √† convertir avec convert_tree(), o√π le param√®tre t est la valeur des cordes optimales trouv√©es et les o√π les sous-arbres T1, T2 correspondent au 1er et 2e fils, le 1er fils √©tant plac√© avant le 2e dans l'ordre des points.

    L'algorithme est en O(k^2) car: (1) le co√ªt de la fonction sans les appels r√©cursifs est O(k); et (2) gr√¢ce √† la m√©morisation, il n'y a que O(k) appels diff√©rents.
    """
    if k == 0: return 0, [0]  # cas d'une feuille
    if k == 1: return chord(1), [1, [0]]  # cas d'un seul fils
    m = UPPER_BOUND # majorant sur la valeur retourn√©e
    
    for t in range(2, k+1): # cherche la meilleure corde t dans [2,k]
        x1,T1 = segment_cm(t-2) # branche pour la corde 1
        x2,T2 = segment_cm(k-t) # branche pour la corde t>1
        x = max(chord(1) + x1, chord(t) + x2)
        if x < m: m,tmin,T1min,T2min = x,t,T1,T2 # on a fait mieux

    return m, [1, T1min, tmin, T2min]

def SEGMENT_CM(n=None):
    """
    On suppose n >= 0 robots plac√©s r√©guli√®rement sur un cercle et un robot au centre qui est r√©veill√©. La fonction renvoie la profondeur du meilleur arbre tel que les deux fils sont toujours plac√©s apr√®s le p√®re (sauf le premier robot inform√© du cercle). L'arbre produit est n√©cessairement planaire sauf la 1√®re ar√™te (propri√©t√© h√©rit√©e de SEGMENT). Elle renvoie aussi l'arbre relatif (cf. segment_cm()) enracin√© √† partir du 2e point inform√© du cercle. C'est donc un sous-arbre de la solution qui n'existe pas si n = 0 ou 1. Attention ! La fonction fixe N = n ce qui est important pour chord().

    STRAT√âGIE. On part du centre vers le point 0 du cercle, puis chacun des deux robots r√©veillent son voisin. √Ä partir de l√†, on applique la strat√©gie r√©cursive segment_cm(k,n) pour les k = ceil((n-3)/2) points restant dans la plus grande moiti√©. On suppose n >= 0, mais les cas n = 0,1,2 sont g√©r√©s √† la main. La complexit√© est celle de segment_cm(n/2), soit O(n^2).

    Variable globale modifi√©e: N, UPPER_BOUND, PROCESS_TIME.
    """
    global N, UPPER_BOUND, PROCESS_TIME
    if n == None: n = N # valeur par d√©faut ne marche pas sinon
    N = n # fixe la variable globale pour chord()
    UPPER_BOUND = 3 # majorant sur segment_cm()
    segment_cm.cache_clear() # efface cache, sinon r√©sultats incorrects
    chord.cache_clear() # efface cache, sinon r√©sultats incorrects

    if n == 0: return 0, None # pas d'arbre dans ce cas
    if n == 1: return 1, None # un seul point √† r√©veiller
    if n == 2: return 1 + chord(1), [0] # deux points √† r√©veiller
    k = ceil((n-3)/2) # k points √† r√©veiller sur la +grande moiti√©

    PROCESS_TIME = process_time()
    x,T = segment_cm(k) # NB: k>=0, car n>=3
    PROCESS_TIME = process_time() - PROCESS_TIME

    return 1 + chord(1) + x, T

@lru_cache(maxsize=None)
def segment_c(k1,k2):
    """
    On suppose N > 0 points plac√©s r√©guli√®rement sur un cercle et qu'un point poss√®de deux robots r√©veill√©s. La fonction renvoie le temps pour que ces deux robots r√©veillent les k1 >= 0 robots pr√©c√©dents et les k2 >= 0 robots suivants selon la strat√©gie suivante: le 1er robot se charge des k1 robots pr√©c√©dents et le 2e robot se charge des k2 suivants, avec les meilleures cordes possibles en recommen√ßant r√©cursivement. Si k1 = 0 (ou k2 = 0), alors les deux robots se partagent au mieux le r√©veil des k2 (ou k1) robots restant.

    La fonction renvoie √©galement un arbre du type [0], [t, [0] ou [ t1, T1, t2, T2 ] donnant les cordes t, t1, t2 optimales pour informer les k1 points avant (ainsi que l'arbre r√©cursif T1 correspondant) et les k2 points apr√®s (ainsi que l'arbre r√©cursif T2 correspondant). Les cordes sont sign√©es pour savoir si elles partent vers l'avant ou l'apr√®s du point initial avec les deux robots. Donc en g√©n√©ral, t1 < 0 et t2 > 0. Mais si k1 ou k2 est nul, t1 et t2 peuvent √™tre du m√™me signe.

    C'est une simple adaptation de SEGMENT() consistant √† remplacer dist() par chord() et √† supprimer le param√®tre racine. L'algorithme est en O( k1^2 * k2^2 * |k1-k2| ) car: (1) le co√ªt de la fonction sans les appels r√©cursifs est O( k1 * k2 * |k1-k2| ); et (2) gr√¢ce √† la m√©morisation, il n'y a que O( k1 * k2 ) appels diff√©rents.
    """
    if k1 == k2 == 0: return 0, [0] # on s'arr√™te dans ce cas

    # CAS 1: k1,k2>0. Il faut trouver la meilleur corde de chaque cot√©
    # (en parall√®le), soit le meilleur t dans [1,k1], puis dans [1,k2]
    if k1>0 and k2>0:
        x1min = x2min = UPPER_BOUND # majorant sur la valeur retourn√©e
        for t in range(1, k1+1): # meilleure corde avant r dans [1,k1]
            x,T = segment_c(k1-t, t-1); x += chord(t)
            if x < x1min: x1min, t1min, T1min = x, t, T
        for t in range(1, k2+1): # meilleure corde apr√®s r dans [1,k2]
            x,T = segment_c(t-1, k2-t); x += chord(t)
            if x < x2min: x2min, t2min, T2min = x, t, T
        return max(x1min, x2min), [-t1min, T1min, t2min, T2min] # le pire des deux branches

    # CAS 2: k1=0 ou k2=0. Les cordes t1,t2 partent toutes deux du m√™me cot√©:
    # avant r si k2=0 ou apr√®s r si k1=0. Il faut donc r√©veiller les robots
    # √† l'aide de deux robots et donc trouver 2 cordes t1<t2 tout et en
    # d√©coupant l'intervalle ]t1,t2[

    # on s'arrange pour avoir k1=0 et k2>0
    s = +1 # signe: +1 si apr√®s (k1=0), -1 si avant (k2=0)
    if k1 > 0: # donc k2=0
        k1,k2 = k2,k1 # √©change k1 et k2
        s = -1

    # CAS 2.1: k2=1, un fils
    if k2 == 1:
        return chord(1), [s, [0]] # cordes +1 ou -1

    # CAS 2.2: k2>=2, deux fils
    m = UPPER_BOUND # majorant sur la valeur retourn√©e
    for t1 in range(1, k2):  # t1=1..k2-1, NB: k2>=2
        c1 = chord(t1)
        for t2 in range(t1+1, k2+1):  # t2=t1+1..k2 (t2=t1 inutile si m√©trique)
            c2 = chord(t2)
            k = t2-t1-1 # il y a k>=0 robots √† se partager entre t1 et t2
            for i in range(0, k+1): # on en prend i pour t1 et k-i pour t2
                x1,T1 = segment_c(t1-1, i) if s>0 else segment_c(i, t1-1)
                x2,T2 = segment_c(k-i, k2-t2) if s>0 else segment_c(k2-t2, k-i)
                x = max(c1+x1, c2+x2)
                if x < m: m,t1min,T1min,t2min,T2min = x,t1,T1,t2,T2 # on a trouv√© mieux
    return m, [s*t1min, T1min, s*t2min, T2min] # cordes de m√™me signe

def SEGMENT_C(n=None):
    """
    On suppose n >= 0 robots plac√©s r√©guli√®rement sur un cercle et un robot au centre qui est r√©veill√©. La fonction renvoie la profondeur du meilleur arbre planaire. Elle renvoie aussi l'arbre relatif [0], [t, [0]] ou [t1, T1, t2, T2], √† convertir avec convert_tree(), o√π les param√®tres t, t1 et t2 sont la valeur des cordes optimales trouv√©es. Ces valeurs sont sign√©es et indiquent si la corde part vers l'avant (>0) ou vers l'arri√®re de la position courant (<0). L'arbre produit est n√©cessairement planaire (propri√©t√© h√©rit√©e de SEGMENT). Attention ! La fonction fixe N = n.

    STRAT√âGIE. On part du centre vers le point 0 du centre, puis chacun des deux robots r√©veillent respectivement les k = ceil((n-1)/2) robots pr√©c√©dents et les n-1-k robots suivants en appliquant segment_c(k,n-1-k,n). En effet, √† cause de la sym√©trie des points, segment_c(a,b) = segment_c(b,a), et donc on peut se limiter √† k<n/2. La complexit√© est celle de segment_c(k,n-k) qui est maximum lorsque N = n et k ~ n/3, ce qui fait O(n^5).

    Variable globale modifi√©e: N, UPPER_BOUND, PROCESS_TIME.
    """
    global N, UPPER_BOUND, PROCESS_TIME
    if n == None: n = N # valeur par d√©faut ne marche pas sinon
    N = n # fixe la variable globale pour chord()
    UPPER_BOUND = 4 # majorant sur segment_c()
    segment_c.cache_clear() # efface cache, sinon r√©sultats incorrects
    chord.cache_clear() # efface cache, sinon r√©sultats incorrects

    if n == 0: return 0, # pas d'arbre dans ce cas
    k = ceil((n-1)/2)  # ici k>=0, car n>0

    PROCESS_TIME = process_time()
    x,T = segment_c(k, n-1-k)
    PROCESS_TIME = process_time() - PROCESS_TIME

    return 1 + x, T

def convert_tree(r, T, n=None):
    """
    Renvoie un arbre enracin√© T = [ r, T_1 ... T_k ] en fonction d'une racine r (indice dans [0,n[) et de l'arbre relatif renvoy√© par SEGMENT_CM() ou SEGMENT_C(). Attention ! Les points du cercle sont num√©rot√©s dans [0,n[ ce qui veut dire que la source ne devra pas appartenir √† cet intervalle et √™tre ajout√©e √† la fin de POINTS. L'algorithme est lin√©aire en la taille de T.
    """
    if n == None: n = N

    if len(T) == 1: return [r] # la racine est c'est tout
    if len(T) == 2: return [r, [(r+T[0]+n)%n]] # la racine est son fils
    return [r, convert_tree((r+T[0]+n)%n,T[1],n), convert_tree((r+T[2]+n)%n,T[3],n)]

@lru_cache(maxsize=None)
def segment(k1,r,k2):
    """
    Donne le temps et l'arbre optimal pour que deux robots r√©veill√©s et plac√©s en POINTS[r] r√©veillent les k1 (resp. k2) robots situ√©s avant (resp. apr√®s) r, le r√©veil des robots devant √™tre r√©alis√© seulement en utilisant les robots du segment [r-k1,r[ (resp. ]r,r+k2]). En particulier, si k1=0 (resp. k2=0), les deux robots partent r√©veiller √† deux le segment ]r,r+k2] (resp. [r-k1,r[).

    L'algorithme est de complexit√© O( k1^2 * k2^2 * |k1-k2| * N ) car: (1) le co√ªt de la fonction sans les appels r√©cursifs est comme segment_c(k1,k2) soit O( k1^2 * k2^2 * |k1-k2| ); et (2) gr√¢ce √† la m√©morisation, il n'y a que O( k1 * N * k2) appels diff√©rents.
    """
    if k1 == k2 == 0: return 0, [r] # on s'arr√™te dans ce cas
    n = len(POINTS)-1 # on fait tout modulo n (en excluant le dernier point qui est ROOT)

    # CAS 1: k1,k2>0. Il faut trouver la meilleur corde de chaque cot√©
    # (en parall√®le), soit le meilleur t dans [1,k1], puis dans [1,k2]
    if k1 > 0 and k2 > 0:
        x1min = x2min = UPPER_BOUND # majorant sur la valeur retourn√©e
        for t in range(1, k1+1): # meilleure corde avant r dans [1,k1]
            v = (r-t+n)%n # v=r-t (modulo n)
            x,T = segment(k1-t, v, t-1); x += dist(r,v)
            if x < x1min: x1min, T1min = x, T
        for t in range(1, k2+1): # meilleure corde apr√®s r dans [1,k2]
            v = (r+t)%n # v=r+t  (modulo n)
            x,T = segment(t-1, v, k2-t); x += dist(r,v)
            if x < x2min: x2min, T2min = x, T
        return max(x1min, x2min), [r, T1min, T2min] # le pire des deux branches

    # CAS 2: k1=0 ou k2=0. Les cordes t1,t2 partent toutes deux du m√™me cot√©:
    # avant r si k2=0 ou apr√®s r si k1=0. Il faut donc r√©veiller les robots
    # √† l'aide de deux robots et donc trouver 2 cordes t1<t2 tout et en
    # d√©coupant l'intervalle ]t1,t2[

    # on s'arrange pour avoir k1=0 et k2>0
    s = +1 # signe: +1 si apr√®s, -1 si avant
    if k1 > 0: # donc k2=0
        k1,k2 = k2,k1 # √©change k1 et k2
        s = -1

    # CAS 2.1: k2=1, un fils
    if k2 == 1:
        v = (r+s+n)%n
        return dist(r,v), [r, [v]]

    # CAS 2.2: k2>=2, deux fils
    m = UPPER_BOUND # majorant sur la valeur retourn√©e
    for t1 in range(1, k2):  # t1=1..k2-1, NB: k2>=2
        v1 = (r+s*t1+n)%n # v1=r+t1 ou r-t1 (modulo n)
        c1 = dist(r,v1)
        for t2 in range(t1+1, k2+1):  # t2=t1+1..k2 (t2=t1 inutile si m√©trique)
            v2 = (r+s*t2+n)%n # v2=r+t2 ou r-t2 (modulo n)
            c2 = dist(r,v2)
            k = t2-t1-1 # il y a k>=0 robots √† se partager entre t1 et t2
            for i in range(0, k+1): # on en prend i pour t1 et k-i pour t2
                x1,T1 = segment(t1-1, v1, i) if s>0 else segment(i, v1, t1-1)
                x2,T2 = segment(k-i, v2, k2-t2) if s>0 else segment(k2-t2, v2, k-i)
                x = max(c1+x1, c2+x2)
                if x < m: m,T1min,T2min = x,T1,T2 # on a trouv√© mieux
    return m, [r, T1min, T2min]

def SEGMENT(P=None, d=None):
    """
    Renvoie le temps et l'arbre optimal de r√©veille d'une liste de points P depuis un robot r√©veill√© et plac√© √† la fin de P (donc plac√© en P[n] o√π n = |P|-1) de sorte que les points de chaque sous-arbre forment un ensemble cons√©cutifs de P. On se base sur segment(k,v,n-1-k) pour un certain premier point v et entier k >= 0 qui sont √† optimiser (un peu comme dans OPTIMAL). On suppose que P contient au moins un point, m√™me si la fonction est d√©finie √† la main pour n = 0. La liste P n'est pas modifi√©e, mais ROOT est fix√© √† n. On suppose le cas m√©trique pour d.

    On peut aussi obtenir x,T = SEGMENT_C(n) avec:

        POINTS = generate_regular_polygon(n) + [(0,0)] # un cercle plus son centre
        x,T = SEGMENT()

    C'est plus lent et on obtient pas forc√©ment le m√™me arbre. Cela vient du fait que les appels r√©cursifs ne sont pas les m√™mes: segment_c(k1,k2) vs. segment(k1,s,k2). Du coup, pour k1 et k2 fix√©s, les arbres pour segment(k1,s,k2) et segment(k1,s',k2) pourraient √™tre diff√©rents alors qu'avec segment_c(k1,k2) il sera bien √©videmment exactement le m√™me. La complexit√© de l'algorithme est O(n^2) fois celle de segment(n/3,r,n/3), soit O(n^8).

    Variables globales modifi√©es: ROOT, POINTS, DIST, UPPER_BOUND, PROCESS_TIME.
    """
    global ROOT, POINTS, DIST, UPPER_BOUND, PROCESS_TIME
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    n = len(P)-1 # nombre de points sans le dernier, qui doit √™tre ROOT
    ROOT = n # fixe la variable globale
    POINTS = P # fixe la variable globale pour dist() et segment()
    DIST = d # fixe la variable globale pour dist() et segment()
    UPPER_BOUND = 100*eccentricity(ROOT,P,d) # 2*(n-1)*eccentricity(ROOT,P,d) # fixe la variable globale pour optimal() qui peut correspondre dans le pire des cas √† la longueur de la plus mauvaise branche
    segment.cache_clear() # sinon r√©sultats incorrects
    dist.cache_clear() # sinon r√©sultats incorrects

    if n == 0: # arbre non d√©fini dans ce cas
        PROCESS_TIME = 0 # temps de calcul nul dans ce cas
        return 0, None

    PROCESS_TIME = process_time()

    m = UPPER_BOUND # majorant
    for v in range(n): # pour tout premier point v=0..n-1, NB: v!=ROOT et n>=1
        y = dist(ROOT,v) # ROOT->v
        for k in range(n): # pour tout nombre de points avant v, k=0..n-1
            x,T = segment(k,v,n-1-k)
            x += y
            if x < m: # on a trouv√© une paire (v,k) meilleure
                m,Tmin = x,T

    PROCESS_TIME = process_time() - PROCESS_TIME

    return m, [ROOT, Tmin]

def GREEDY_SEGMENT(P=None, d=None):
    """
    Applique SEGMENT sur un ensemble de points qui a √©t√© pr√©c√©demment ordonn√© selon un chemin glouton (point de plus proche) en partant du dernier point de P. Ainsi, les n = |P|-1 premi√®res positions de P sont r√©ordonn√©es, et le point le plus proche de la source, P[n], est P[n-1]. Comme SEGMENT(), ROOT est fix√© √† n. La complexit√© ajoute O(n^2) √† la complexit√© de SEGMENT.

    Variables globales modifi√©es: ROOT et UPPER_BOUND (via SEGMENT), POINTS, DIST, PROCESS_TIME.
    """
    global POINTS, DIST, PROCESS_TIME
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    n = len(P)-1 # nombre de points sans le dernier, qui doit √™tre ROOT
    POINTS = P # fixe la variable globale pour dist() et segment()
    DIST = d # fixe la variable globale pour dist() et segment()

    # attention de ne pas utiliser dist() qui est cach√© car les points
    # sont potentiellement r√©ordonn√©s et donc dist(i,j) peut varier.

    PROCESS_TIME = process_time()

    for i in range(n,0,-1): # pour tout i=n..1
        xmin = d(P[i],P[i-1]) # cherche le point P[j] le plus proche de P[i]
        for j in range(i-2,-1,-1): # pour tout j=i-2..0
            x = d(P[i],P[j])
            if x < xmin: xmin,P[i-1],P[j] = x,P[j],P[i-1] # mise √† jour avec √©change
    
    x,T = SEGMENT(P,d) # applique SEGMENT

    PROCESS_TIME = process_time() - PROCESS_TIME 
    return x,T


#############################
#
# ALGORITHME: OPTIMAL(r,P,d)
#
#############################

"""
Algorithme optimal de r√©veil d'un ensemble de points P quelconque, depuis un point r de P et pour une fonction de distance d quelconque (pas forc√©ment m√©trique, pas d'in√©galit√© triangulaire donc).

On va faire une analogie avec le voyageur de commerce (TSP). Le brute-force, de mani√®re g√©n√©ral, consiste √† tester toutes les "sorties" possibles. Pour le TSP, c'est un ordre sur les n points, ce qui donne un algorithme brute-force en n!*poly(n) o√π poly(n) est pour les d√©tails de l'impl√©mentation. Pour Freeze-Tag (FT), la sortie est un arbre √©tiquet√© par les n points, soit un algorithme brute-force en n! * 2^n * poly(n) ou √† peu pr√®s.

Le c√©l√®bre algorithme d'Held-Karp pour le TSP casse la barri√®re du n! en affirmant qu'on a pas forc√©ment besoin de balayer toutes les sorties possibles pour trouver la meilleure. C'est assez surprenant de prime abord, et leur algorithme est en 2^n * poly(n) ce qui a des cons√©quences pratiques puisque qu'on passe de n=12 √† n=26 en moins de 30" (avec mon impl√©mentation en C). Et bien, j'ai un algorithme exact pour FT en c^n * poly(n) qui comme Held-Karp fonctionne pour n'importe quelle fonction de distance. Ici c = 3. Notez que Held-Karp est le meilleur algorithme connue pour le TSP o√π d est non-m√©trique. C'est facile √† impl√©menter, donc je vais le faire. Je pense que pour n ~ 10 √ßa devrait le faire. (PS: Effectivement cela passe et m√™me on peut aller jusqu'√† 17 points car la complexit√©, le poly(n) et c, sont plus faibles que ce que je pensais au d√©part.) Notons qu'on pourra tester la m√©trique que l'on veut si cela nous int√©resse.

D'ailleurs, en conservant l'analogie avec TSP, je me demande si on ne peut pas montrer le m√™me ph√©nom√®ne de non-localit√©, c'est-√†-dire le fait de d√©placer un peu un point et que la branche la plus profonde change compl√®tement. Car c'est cela qui rend difficile le TSP (changement complet de la tourn√©e en d√©pla√ßant juste un point). Bon, √† voir.

Une propri√©t√© qu'on va utiliser elle la suivante: 

PROPOSITION (Un fils). Dans le cas m√©trique, tout noeud d'un arbre optimal de degr√© deux, doit √™tre connect√© √† une feuille. (En fait, il faudrait dire qu'il existe toujours un arbre optimal o√π les noeuds de degr√© deux sont connect√©s √† des feuilles.)

PREUVE. Sinon, son p√®re pourrait informer plus rapidement un de ses petits fils. Pour le 2e point, soit h la hauteur d'un arbre optimal.
QED

Il est faux de dire que l'arbre est hauteur h = ceil{log_2(n)}. En fait, on peut quasiment avoir n'importe quelle hauteur h > log(n) d√©sir√©e (l'exemple 1 des slides de la r√©union TEMPORAL montre d'ailleurs un exemple avec n=8 points avec la source et la plus longueur branche comprenant 4 ar√™tes ...). Une fois arriv√© √† deux robots, il est tout √† fait possible d'avoir un sous-arbre de petite hauteur mais avec de longues branches et l'autre sous-arbre avec une grande profondeur mais des points relativement tr√®s proches les uns des autres.

PROPOSITION (Un fils, bis). Soient u-v-w trois sommets d'une branche d'arbre optimal tel que w est une feuille de p√®re v, lui m√™me de p√®re u, et avec v de degr√© deux. Alors, si d() est sym√©trique (en particulier dans le cas m√©trique), d(u,v) <= d(u,w). (En fait, il faudrait dire qu'il existe toujours un arbre optimal o√π d(u,v) <= d(u,w).)

PREUVE. Dans l'arbre optimal, d(u,v) + d(v,w) <= d(u,w) + d(w,v), car sinon on pourrait utiliser la branche u-w-v au lieu de u-v-w. (NB: Ce n'est forc√©ment vrai si v a un troisi√®me voisin.) En particulier, comme d(v,w) = d(w,v), cela implique que d(u,v) <= d(u,w).
QED

EN fait cette derni√®re proposition n'est pas forc√©ment tr√®s int√©ressante en pratique car elle est de fait r√©alis√©e par la fonction optimal(r,A,b). C'est un peu comme si on prenait 4 points et qu'on exprimait le r√©sultat en fonction de minimum sur des ensembles (ou partitions) plus petite.

PROPOSITION (Non croisements). Dans le cas m√©trique, il existe toujours un arbre optimal sans que deux robots ne puissent se croiser (au m√™me moment et m√™me endroit).

PREUVE [√Ä FINIR]. On part d'un arbre optimal avec des segments de droites. Si deux chemins se croisent au m√™me moment, disons au point w, c'est que la distance √† la source est la m√™me. On consid√®re les deux ar√™tes uv et xy de l'arbre, qui sont des segments de droites, qui s'intersectent en w. On peut modifier l'arbre en √©changeant uv avec uy et xy avec xv. Il faut montrer que la plus longue des deux branches a diminu√©e ... [√Ä FINIR] La somme totale des longueurs des ar√™tes a strictement diminu√©e. Il suit qu'en r√©p√©tant la proc√©dure, on obtient un arbre sans aucun croisement. La proc√©dure de d√©croisement, m√™me si elle converge, pourrait ne pas √™tre polynomiale.
QED

Plus en d√©tails. On se base sur optimal(r,A,b) qui renvoie l'arbre optimal de r√©veille du sous-ensemble de points A √† partir d'1 ou 2 robots (d√©pendant de b) r√©veill√©s et plac√©s en r.

Pour tout point r et ensemble A ne contenant pas r:
    optimal(r,A,1) = 0 si |A| = 0
    optimal(r,A,1) = min_{u‚àäA} { dist(r,u) + optimal(u,A\{u},2)} si |A| > 0
    optimal(r,A,2) = min_{A1,A2} max{ optimal(r,A1,1), optimal(r,A2,1) }, o√π {A1,A2} est une partition de A (si dist() est une m√©trique on peut forcer √† ce que |A1|=0 => |A2|=1 (ou le contraire) de sorte que les sommets de degr√© deux (donc avec 1 fils) de l'arbre m√®ne n√©cessairement √† une feuille. Il faut alors distinguer le cas |A|=0, |A|=1 et |A| >= 2.)

"""

@lru_cache(maxsize=None)
def optimal(r,A,b):
    """
    Renvoie le temps et l'arbre optimal de r√©veille du sous-ensemble A (sous-ensemble d'indices de POINTS) √† partir de robots r√©veill√©s et positionn√©s en r (indice de POINTS). Si b=True, il n'y a qu'un seul robot r√©veill√© (et r poss√©dera un seul fils dans l'arbre) et sinon deux sont r√©veill√©s (et r poss√©dera deux fils). Le sous-ensemble A ne doit pas contenir r. Il peut √™tre vide si b=True mais il doit contenir au moins un √©l√©ment si b=False. On se place dans le cas m√©trique, c'est-√†-dire que DIST v√©rifie l'in√©galit√© triangulaire. Attention ! A est ici un tuple, pas une liste, de fa√ßon √† √™tre "hashable" ce qui est important pour @lru_cache().

    STRAT√âGIE

        CAS 1 (b=True): il faut choisir la meilleure cible v dans A, puis r√©veiller tous les points de A\{v} avec deux robots plac√©s v en appliquant optimal(v,A\{v},False) et ainsi cr√©er un arbre de racine r avec un fils, v et son sous-arbre.

        CAS 2 (b=False): il faut couper A en deux sous-ensembles, A1 et A2, chacun avec au moins un √©l√©ment, et appliquer la strat√©gie optimal(r,A1,True) et optimal(r,A2,True) et ainsi cr√©er un arbre de racine r avec deux fils. Il faut bien s√ªr tester toutes les partitions {A1,A2} et prendre le meilleur arbre. Dans le cas non-m√©trique, il faudrait tester √©galement le cas o√π un seul robot se d√©place (ou disons le cas o√π les deux robots se d√©placent le long de la m√™me ar√™te). C'est inutile dans le cas m√©trique.

    Notons a = |A| et p = |POINTS|. La complexit√© est alors O( a*p * 2^a * binom(p,a) ) car: (1) le co√ªt de la fonction sans les appels r√©cursifs est O( 2^a * a ) √† cause du CAS 2; et (2) gr√¢ce √† la m√©morisation, le nombre d'appels diff√©rents est O( p * binom(p,a) ) car les ensembles B (CAS 1) puis A1 et A2 (CAS 2) sur lesquels on rappelle la fonction sont des sous-ensembles de A. On va maintenant donner une borne seulement en fonction de p, ce qui servira pour l'analyse de complexit√© de la fonction OPTIMAL(). On va faire mieux qu'un na√Øf O( p^2 * 4^p ) en majorant a <= p et binom(p,a) <= 2^p.
    
    Posons x = a/p. Il est bien connu que, pour tout ratio constant x = 0..1, binom(p,px) ~ h(x)^p / ‚àö(2ùúãx(1-x)p) o√π h(x) = (1/x)^x * (1/(1-x))^(1-x). On va se concentrer sur le terme le plus important, la base de l'exposant p. Du coup le terme 2^a * binom(p,a) devient 2^px * binom(p,px) ‚âÉ (2^x * h(x))^p. Il suffit maintenant de "voir" quand est-ce que le terme 2^x * h(x) est maximum. De mani√®re analytique Maple dit que maximize(2^x*(1/x)^x*(1/(1-x))^(1-x), x=0..1, location) vaut 3 r√©alis√© pour x = 2/3. Un autre argument, tout aussi valable permet de montrer que c'est effectivement que 2^a * binom(p,a) <= 3^p. En effet, le terme 2^a code un sous-ensemble A' de A (en fait deux, A1 et A2 qui sont compl√©mentaires dans A) et que le terme binom(p,a) code le sous-ensemble A de POINTS. Bref, le produit 2^a * binom(p,a) code un couple (A',A). Combien y'a-t'il de tels couples ? Autant que de mots M sur {1,2,3} avec p lettres, avec le codage suivant (du coup il y en a 3^p):
    
        M[i] = 1 si l'√©l√©ment i de POINTS appartient √† A'
        M[i] = 2 si l'√©l√©ment i de POINTS appartient √† A\A'
        M[i] = 3 si l'√©l√©ment i de POINTS n'appartient pas √† A

    Du coup, il y en a bien au plus 3^p. Bref, on peut majorer la complexit√© O( ap * 2^a * binom(p,a) ) par O( p^{3/2} * 3^p ) (ne pas oublier le 1/‚àöp dans binom(p,px)). Notons qu'il manque sans doute un terme en log(n) pour la m√©morisation, bien qu'il soit sans doute possible de l'impl√©menter en temps O(1), au moins de mani√®re amortie.

    NB. Il faut √™tre vigilant sur la gestion des listes et veiller √† ne pas trop en g√©n√©rer. On pourrait coder les sous-ensembles par des entiers, peut-√™tre pour gagner en vitesse et utiliser plus efficacement le cache. En tout cas, la pr√©sence de tuple(A)/list(A) dans les appels r√©cursifs sont n√©cessaires pour √©viter l'erreur "TypeError: unhashable type: 'list'" (on ne peut pas mettre dans le cache les appels de fonctions qui contiennent des listes, mais c'est ok pour les tuples).

    AMELIORATIONS ?
    
    On pourrait inclure une borne inf√©rieure de fa√ßon √† couper des branches de calculs inutiles. Cependant √† cause de la m√©morisation, il n'est pas s√ªr que cela am√©liore le temps car on va de toutes fa√ßons tout calculer. L'espoir n'est pas de gagner sur le nombre valeurs (r,A,b) possibles (qui va en fait augmenter), mais sur la complexit√© de la fonction, notamment le CAS 2, sur le terme 2^{|A|}. On peut esp√©rer couper avant de tout faire.

    Pour le cas m√©trique, comme borne inf, on pourrait se baser sur LB(r,A) = h(r) + ecc(r,A), la hauteur d√©j√† calcul√©e pour atteindre r plus la plus grande distance restant √† faire pour r√©veiller A depuis r. Si LB(r,A) est sup√©rieure au meilleur arbre d√©j√† calcul√©, cela n'est pas la peine de continuer et de partitionner A, et gagner ainsi sur le terme en 2^{|A|}. En ajoutant un param√®tre h, pour indiquer la profondeur atteinte par r, la m√©morisation marchera. Il y aura une perte en complexit√© qu'il faudra multiplier par le nombre de valeur possible pour la borne inf, disons NB_DIGIT. Donc pour esp√©rer gagner du temps, il faut imp√©rativement avoir NB_DIGIT < |POINTS|/3 (soit la taille critique pour A). (NB_DIGIT = 3 pourrait √™tre un bon point de d√©part). En fixant h = -1 (une constante), on pourrait permettre √† la fonction de ne pas tenir compte de la borne inf, et ainsi retrouver exactement les m√™mes complexit√© et performances que la version optimal(r,A,b) originale.
    
    Cependant, ce qui n'est pas clair est de savoir comment r√©cup√©rer une borne sup sur l'arbre le meilleur trouv√© ? Na√Øvement, le meilleur arbre d√©j√† calcul√© pourrait √™tre d√©termin√© √† chaque fois qu'on atteint un cas terminal, soit lorsque |A| = 0 ou 1. Mais ce n'est pas vrai, car dans les cas terminaux on se sait pas si en parall√®le il y a, il y aura, ou il n'y aura pas de branche plus longue. Une possibilit√© est de fixer UPPER_BOUND = SEGMENT()[0]. Une autre borne sup possible plus rapide √† calculer est somme_{i=0}^{n-2} dist((r+i+r)%n,(r+i+1)%n) en O(n), ou encore un chemin glouton (style point le plus proche) en O(n^2). √Ä voir.
    """

    n = len(A)
    if n == 1: return dist(r,A[0]), [r, list(A)] # c'est fini: r a un fils qui est une feuille
    xmin = UPPER_BOUND # majorant sur le r√©sultat

    if b:
        ############################
        # CAS 1: un robot r√©veill√© #
        ############################

        if n == 0: return 0, [r] # c'est fini: r est une feuille
    
        # cherche le meilleur point v de A √† r√©veiller, NB: ici |A|>=2
        C = list(A) # √©vite de faire list(A) dans la boucle
        for v in A: # pour chaque v possible de A
            B = C[:] # B = copie de A
            B.remove(v) # B = B\{v} = A\{v}, NB: pas possible de faire remove si tuple ...
            x,T = optimal(v,tuple(B),False) # calcul de la solution pour (v,B)
            x += dist(r,v) # ajoute le temps r->v
            if x < xmin: # on a trouv√© mieux en commen√ßant par v
                xmin,Tmin = x,T # on garde la meilleure solution

        return xmin, [r, Tmin] # arbre avec un fils

    #########################
    # Deux robots r√©veill√©s #
    #########################

    # Il faut couper A en deux sous-ensembles, A1 et A2, chacun avec au moins 1 point ce qui est possible car ici |A|>=2. Pour cela on repr√©sente un sous-ensemble par un mot binaire w sur |A| bits. Les bits √† 1 de w sont les √©l√©ments de A1, les bits 0 ceux de A2. On √©vite w=000...00 et w=111...11 de fa√ßon √† garantir |A1|,|A2|>=1. Comme {A1,A2} forment une partition de A, on peut supposer que pour A1 on va de w=000...01 √† 011..11. Enfin, on va s'arranger pour que |A1|>=|A2| afin de couper plus vite car a priori c'est pour les grands ensembles que l'arbre est le moins profond.

    for w in range(1,2**(n-1)): # w = 000..01 √† 011..11

        # construit A1 et A2 en fonction de w
        A1 = []; A2 = [] # surtout ne pas mettre A1=A2=[] ...
        for i in range(n): 
            if w & 1: # teste le dernier bit de w
                A1 += [A[i]]
            else: A2 += [A[i]]
            w >>= 1 # enl√®ve le dernier bit √† w
            # NB: cela ne modifie pas le w de la boucle "for w in range(...)"

        if len(A1)<len(A2): A1,A2 = A2,A1 # ici |A1|>=|A2|

        x1,T1 = optimal(r,tuple(A1),True) # 1 robot r√©veille A1
        if x1 >= xmin: continue # pas la peine de continuer
        x2,T2 = optimal(r,tuple(A2),True) # 1 robot r√©veille A2
        x = max(x1,x2) # la plus grande des deux branches
        if x < xmin: # on a trouv√© un meilleur arbre
            xmin,T1min,T2min = x,T1,T2

    # Ici T1min et T2min ont la m√™me racine r. Il faut les fusionner.
    # Ex: si T1min=[r,T1'] et T2min=[r,T2'] (un fils chacun)
    # alors -> [r, T1', T2'] (deux fils pour r)

    return xmin, [r, T1min[1], T2min[1]]

def OPTIMAL(r=None, P=None, d=None):
    """
    Renvoie le temps et l'arbre optimal de r√©veille pour un ensemble de points P depuis un robot r√©veill√© r qui doit √™tre un indice de P. Il faut donc |P| >= 1 et r dans [0,|P|[. La liste P n'est pas modifi√©e. On se place dans le cas m√©trique, c'est-√†-dire que DIST v√©rifie l'in√©galit√© triangulaire. 

    La complexit√© de l'algorithme est major√©e par l'appel √† optimal(r,A,b), soit O( n^{3/2} * 3^n ) avec n = |POINTS|. En pratique, pour n = 15+1 points, cela prend 1'35" et pour n = 16+1 points, 5'30". Notons que 17! = 355,687,428,096,000 ~ 4.1 jours). Donc cela confirme que l'algorithme est significativement plus rapide que n!.

    Variables globales modifi√©es: ROOT, POINTS, DIST, UPPER_BOUND, PROCESS_TIME.
    """
    global ROOT, POINTS, DIST, UPPER_BOUND, PROCESS_TIME
    if r == None: r = ROOT # valeur par d√©faut ne marche pas sinon
    if P == None: P = POINTS # valeur par d√©faut ne marche pas sinon
    if d == None: d = DIST # valeur par d√©faut ne marche pas sinon
    ROOT = r # fixe la variable globale
    POINTS = P # fixe la variable globale pour optimal()
    DIST = d # fixe la variable globale pour optimal()
    n = len(P)
    UPPER_BOUND = 100*eccentricity(ROOT,P,d) # 2*(n-1)*eccentricity(ROOT,P,d) # fixe la variable globale pour optimal() qui peut correspondre dans le pire des cas √† la longueur de la plus mauvaise branche
    optimal.cache_clear() # sinon r√©sultats incorrects
    dist.cache_clear() # sinon r√©sultats incorrects
    
    PROCESS_TIME = process_time()

    if n == 1: return 0, [r] # aucun point √† r√©veiller, le seul point r l'est d√©j√†
    A = list(range(n)) # A = [0,|P|[ = indices de P
    del A[r] # A = [0,r[ u ]r,|P|[ = indices de P sauf r
    x,T = optimal(r,tuple(A),True) # ici r doit r√©veiller A

    PROCESS_TIME = process_time() - PROCESS_TIME

    return x,T


######################################################################
#
# Affiche les premi√®res valeurs pour n points r√©guliers sur un cercle
#
######################################################################

DIST = dist_L2 # fonction de distance

for n in range(10):
    print(f"T_segment_cm({n}) = {SEGMENT_CM(n)[0]:.3f}", sep="", end="\t")
    print(f"T_segment_c({n}) = {SEGMENT_C(n)[0]:.3f}", sep="", end="\t")
    POINTS = generate_regular_polygon(n) + [(0,0)] # un cercle plus son centre
    print(f"T_segment({n}) = {SEGMENT()[0]:.3f}", sep="", end="\t")
    print(f"T_optimal({n}) = {OPTIMAL(n)[0]:.3f}", sep="", end="\t")
    if n%2 == 0 and n>0:
        x=1+2*(sin(pi/n)+cos(pi/n))
        print(f"theo({n}) = {x:.3f}", sep="", end="\t")
    print()

########################################
# Quelques r√©sultats d√©j√† calcul√©s pour
# n points uniformes sur le cercle
########################################

# Pour n=4,6,8,10,12, T_optimal(n) = 1+2(sin(pi/n)+cos(pi/n))
# Ce n'est plus vrai pour n=14,16
#
# T_segment_cm(0) = 0.000     T_segment_c(0) = 0.000     T_segment(0) = 0.000     T_optimal(0) = 0.000
# T_segment_cm(1) = 1.000     T_segment_c(1) = 1.000     T_segment(1) = 1.000     T_optimal(1) = 1.000
# T_segment_cm(2) = 3.000     T_segment_c(2) = 3.000     T_segment(2) = 3.000     T_optimal(2) = 3.000
# T_segment_cm(3) = 2.732     T_segment_c(3) = 2.732     T_segment(3) = 2.732     T_optimal(3) = 2.732
# T_segment_cm(4) = 3.828     T_segment_c(4) = 3.828     T_segment(4) = 3.828     T_optimal(4) = 3.828
# T_segment_cm(5) = 3.351     T_segment_c(5) = 3.351     T_segment(5) = 3.351     T_optimal(5) = 3.351
# T_segment_cm(6) = 3.732     T_segment_c(6) = 3.732     T_segment(6) = 3.732     T_optimal(6) = 3.732
# T_segment_cm(7) = 3.431     T_segment_c(7) = 3.431     T_segment(7) = 3.431     T_optimal(7) = 3.431
# T_segment_cm(8) = 3.613     T_segment_c(8) = 3.613     T_segment(8) = 3.613     T_optimal(8) = 3.613
# T_segment_cm(9) = 3.416     T_segment_c(9) = 3.416     T_segment(9) = 3.416     T_optimal(9) = 3.416
# T_segment_cm(10) = 3.520    T_segment_c(10) = 3.520    T_segment(10) = 3.520    T_optimal(10) = 3.520
# T_segment_cm(11) = 3.383    T_segment_c(11) = 3.383    T_segment(11) = 3.383    T_optimal(11) = 3.383
# T_segment_cm(12) = 3.449    T_segment_c(12) = 3.449    T_segment(12) = 3.449    T_optimal(12) = 3.449
# T_segment_cm(13) = 3.349    T_segment_c(13) = 3.349    T_segment(13) = 3.349    T_optimal(13) = 3.349
# T_segment_cm(14) = 3.454    T_segment_c(14) = 3.454    T_segment(14) = 3.454    T_optimal(14) = 3.454
# T_segment_cm(15) = 3.318    T_segment_c(15) = 3.318    T_segment(15) = 3.318    T_optimal(15) = 3.318
# T_segment_cm(16) = 3.443    T_segment_c(16) = 3.443    T_segment(16) = 3.443    T_optimal(16) = 3.443
#
# T_segment_cm(40) = 3.289    T_segment_c(40) = 3.289    T_segment(40) = 3.289
# T_segment_cm(41) = 3.270    T_segment_c(41) = 3.270    T_segment(41) = 3.270
# T_segment_cm(42) = 3.277    T_segment_c(42) = 3.277    T_segment(42) = 3.277
# T_segment_cm(43) = 3.259    T_segment_c(43) = 3.259    T_segment(43) = 3.259
# T_segment_cm(44) = 3.265    T_segment_c(44) = 3.265    T_segment(44) = 3.265
# T_segment_cm(45) = 3.249    T_segment_c(45) = 3.249    T_segment(45) = 3.249
# T_segment_cm(46) = 3.255    T_segment_c(46) = 3.254    T_segment(46) = 3.254
# T_segment_cm(47) = 3.239    T_segment_c(47) = 3.239    T_segment(47) = 3.239
# T_segment_cm(48) = 3.255    T_segment_c(48) = 3.245    T_segment(48) = 3.245 <- SEGMENT devient meilleur
# T_segment_cm(49) = 3.231    T_segment_c(49) = 3.231    T_segment(49) = 3.231
# T_segment_cm(50) = 3.255    T_segment_c(50) = 3.235    T_segment(50) = 3.235
# T_segment_cm(51) = 3.225    T_segment_c(51) = 3.223    T_segment(51) = 3.223
# T_segment_cm(52) = 3.254    T_segment_c(52) = 3.227    T_segment(52) = 3.227
# T_segment_cm(53) = 3.225    T_segment_c(53) = 3.215    T_segment(53) = 3.215
# T_segment_cm(54) = 3.252    T_segment_c(54) = 3.219    T_segment(54) = 3.219
# T_segment_cm(55) = 3.226    T_segment_c(55) = 3.208    T_segment(55) = 3.208
# T_segment_cm(56) = 3.254    T_segment_c(56) = 3.212    T_segment(56) = 3.212
# T_segment_cm(57) = 3.225    T_segment_c(57) = 3.201    T_segment(57) = 3.201
# T_segment_cm(58) = 3.252    T_segment_c(58) = 3.205    T_segment(58) = 3.205
# T_segment_cm(59) = 3.228    T_segment_c(59) = 3.195    T_segment(59) = 3.195
# T_segment_cm(60) = 3.246    T_segment_c(60) = 3.201    T_segment(60) = 3.201
# T_segment_cm(61) = 3.229    T_segment_c(61) = 3.189    T_segment(61) = 3.189
# T_segment_cm(62) = 3.240    T_segment_c(62) = 3.204    T_segment(62) = 3.204 <- anomalie wrt n=60
# T_segment_cm(63) = 3.224    T_segment_c(63) = 3.184    T_segment(63) = 3.184
# T_segment_cm(64) = 3.234    T_segment_c(64) = 3.206    T_segment(64) = 3.206 <- anomalie wrt n=62,60
# T_segment_cm(65) = 3.220    T_segment_c(65) = 3.182    T_segment(65) = 3.182
# T_segment_cm(66) = 3.229    T_segment_c(66) = 3.204    T_segment(66) = 3.204 <- anomalie wrt n=60
# T_segment_cm(67) = 3.215    T_segment_c(67) = 3.185    T_segment(67) = 3.185 <- anomalie wrt n=65
# T_segment_cm(68) = 3.224    T_segment_c(68) = 3.201
# T_segment_cm(69) = 3.211    T_segment_c(69) = 3.186
# T_segment_cm(70) = 3.219    T_segment_c(70) = 3.197
# T_segment_cm(71) = 3.206    T_segment_c(71) = 3.183
# T_segment_cm(72) = 3.214    T_segment_c(72) = 3.194
# T_segment_cm(73) = 3.202    T_segment_c(73) = 3.180
# T_segment_cm(74) = 3.212    T_segment_c(74) = 3.190
# T_segment_cm(75) = 3.198    T_segment_c(75) = 3.178
# T_segment_cm(76) = 3.214    T_segment_c(76) = 3.187
# T_segment_cm(77) = 3.195    T_segment_c(77) = 3.175
# T_segment_cm(78) = 3.215    T_segment_c(78) = 3.183
# T_segment_cm(79) = 3.196    T_segment_c(79) = 3.172
# T_segment_cm(80) = 3.216    T_segment_c(80) = 3.180
# T_segment_cm(81) = 3.197    T_segment_c(81) = 3.169
# T_segment_cm(82) = 3.213    T_segment_c(82) = 3.177
# T_segment_cm(83) = 3.199    T_segment_c(83) = 3.167
# T_segment_cm(84) = 3.210    T_segment_c(84) = 3.174
# T_segment_cm(85) = 3.198    T_segment_c(85) = 3.164
# T_segment_cm(86) = 3.207    T_segment_c(86) = 3.171
# T_segment_cm(87) = 3.195    T_segment_c(87) = 3.162
# T_segment_cm(88) = 3.203    T_segment_c(88) = 3.168
# T_segment_cm(89) = 3.193    T_segment_c(89) = 3.159
# T_segment_cm(90) = 3.198    T_segment_c(90) = 3.166
# T_segment_cm(91) = 3.191    T_segment_c(91) = 3.157
# T_segment_cm(92) = 3.194    T_segment_c(92) = 3.163
# T_segment_cm(93) = 3.188    T_segment_c(93) = 3.155
# T_segment_cm(94) = 3.190    T_segment_c(94) = 3.160
# T_segment_cm(95) = 3.185    T_segment_c(95) = 3.152
# T_segment_cm(96) = 3.187    T_segment_c(96) = 3.158
# T_segment_cm(97) = 3.181    T_segment_c(97) = 3.150
# T_segment_cm(98) = 3.183    T_segment_c(98) = 3.155
# T_segment_cm(99) = 3.178    T_segment_c(99) = 3.148
# ...
# T_segment_cm(120) = 3.164   T_segment_c(120) = 3.141
# T_segment_cm(121) = 3.155   T_segment_c(121) = 3.134
# T_segment_cm(122) = 3.163   T_segment_c(122) = 3.140
# T_segment_cm(123) = 3.154   T_segment_c(123) = 3.133
# T_segment_cm(124) = 3.162   T_segment_c(124) = 3.139
# T_segment_cm(125) = 3.153   T_segment_c(125) = 3.132
# T_segment_cm(126) = 3.160   T_segment_c(126) = 3.138
# T_segment_cm(127) = 3.152   T_segment_c(127) = 3.131
# T_segment_cm(128) = 3.159   T_segment_c(128) = 3.136
# T_segment_cm(129) = 3.152   T_segment_c(129) = 3.130
# T_segment_cm(130) = 3.159   T_segment_c(130) = 3.135
# T_segment_cm(131) = 3.151   T_segment_c(131) = 3.129
# T_segment_cm(132) = 3.159   T_segment_c(132) = 3.134
# ...
# T_segment_cm(255) = 3.107   T_segment_c(255) = 3.084
# T_segment_cm(256) = 3.109   T_segment_c(256) = 3.086
# T_segment_cm(257) = 3.106   T_segment_c(257) = 3.084
# T_segment_cm(300) = 3.098   T_segment_c(300) = 3.075
# T_segment_cm(400) = 3.081   T_segment_c(400) = 3.062
# T_segment_cm(500) = 3.072   T_segment_c(500) = 3.055
# ...
# T_segment_cm(20000) = 3.007

#######
# MISC
#######
def angle(A,B):
    """
    Mesure de l'arc orient√© de A √† B. Le r√©sultat est un angle de [0,2ùúã[.
    """
    c = 2*pi
    a = (atan2(*A)+c)%c # dans [0,2ùúã[ car atan2() dans [-ùúã,+ùúã]
    b = (atan2(*B)+c)%c # dans [0,2ùúã[ car atan2() dans [-ùúã,+ùúã]
    return (b-a+c)%c

def best_balanced(P,a):
    """
    Renvoie le triplet (i,k,b) tel que arc(P[i-1],P[i+1]) <= a et l'axe entre (0,0) et P[i] √©quilibre le plus le nombre de points des deux moiti√©s du cercle d√©limit√© cet axe, P[i] √©tant exclu. L'entier k est ce d√©s√©quilibre et b = arc(P[i-1],P[i+1]), angle non orient√© donc dans [0,ùúã[. Il est n√©cessaire que P soit convexe et ordonn√© suivant son bord, que l'origine soit √† l'int√©rieur et que a <= 4ùúã/|P|.
    """
    n = len(P)
    kmin = n+1 # valeur de k √† renvoyer
    for i in range(n):

        # angle pas assez petit
        b = angle(P[(i-1+n)%n],P[(i+1+n)%n])
        if min(b,2*pi-b) > a: continue

        # compte les points dans chaque moiti√© par rapport √† P[i]
        n1 = n2 = 0
        for j in range(n):
            if 0 < angle(P[i],P[j]) <= pi: n1 += 1
            else: n2 += 1

        k = abs(n1-n2) # √©quilibre du point P[i]
        if k < kmin: imin,kmin,bmax = i,k,b # on a trouv√© mieux

    return imin, kmin, bmax

def test_best_balanced(n,r):
    """
    Teste l'hypoth√®se selon laquelle il existe toujours un point P[i] des n points de P avec arc(P[i-1],P[i+1]) <= 4pi/n et un d√©s√©quilibre d'au plus une certaine borne K. On r√©p√®te r fois le tirage de n listes al√©atoires. Pour le moment, je n'ai jamais trouv√© K>3 (r√©alis√© avec n=5). Mais cela vient peut-√™tre que K=log(n) ou K=sqrt(n). Car, lorsque n grandit, les cas limites deviennent plus difficiles √† trouver.
    """
    kmax = -1
    a = 4*pi/n
    for i in range(r):
        P = generate_von_mises(n,0) # cercle al√©atoire
        P.sort(key=lambda A: atan2(*A)) # tri selon les angles
        i,k,b = best_balanced(P,a)
        if k > kmax:
            imax,kmax,bmax,Pmax = i,k,b,P[:]

    i,k,b,P = imax,kmax,bmax,Pmax
    P += [(0,0)] # pour visualiser le centre
    global ROOT
    ROOT = i
    draw_all(f'k = {k}\na = {b:.3f}\na_max = {a:.3f}',P=P)
    return

#test_best_balanced(5,10**6)
#quit()

######################
#
# Affiche les courbes
#
######################

X = range(10) # intervalle de valeurs pour n
mpl.rcParams['lines.marker'] = 'o'
mpl.rcParams['lines.markersize'] = 3

plt.grid(True) # affine une grille
plt.clf() # efface le dessin

Y = [SEGMENT_CM(n)[0] for n in X]
plt.plot(list(X), Y)

Y = [SEGMENT_C(n)[0] for n in X]
plt.plot(list(X), Y)

plt.legend(["segment_cm","segment_c"])
plt.show()


############################################
#
# Affiche des examples de points et d'arbre
#
########d####################################

# borne inf√©rieure pour la norme L_p
LP_NORM = 1.5
DIST = dist_Lp

P = [(0,0)]
if LP_NORM<=2:
    P += [(1,0),(0,1),(-1,0),(0,-1)]
else:
    u = 1/2**(1/LP_NORM)
    P += [(u,u),(-u,u),(-u,-u),(u,-u)]

SEED = -1 # pour ne pas afficher la seed
PROCESS_TIME = 0 # temps √©coul√© en seconde pour affichage dans draw_all
u = 1+2**(1+max(1/LP_NORM,1-1/LP_NORM))
x,T = OPTIMAL(0,P)
draw_all(f'norm L_{LP_NORM}\nconjecture = {u:.3f}\nlower bound',x,T)

# contre-exemples en norme L_inf pour un carr√© 1x1
# 6+1 points et depth = 2.1
DIST = dist_Linf # fonction de distance par d√©faut, pour dist()
P = [
    (0,0),(0,1),(1,0),(1,1),
    (0,     .8),
    (1,     .4),
    (1,     .7)
]
SEED=-1 # pour ne pas afficher la seed
PROCESS_TIME = 0 # temps √©coul√© en seconde pour affichage dans draw_all
x,T = OPTIMAL(0,P)
draw_all('optimal',x,T)
quit()

# Exemple montrant que si n = 2^k alors l'arbre binaire n'est
# pas forc√©ment l'optimal:
#
# init_seed(2074)
# N = 7 # nombre de points
# POINTS = generate_von_mises(N,0.5) # points uniforme sur le disque
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# PROCESS_TIME = 0
# SEED = -1
# draw_all()
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# Exemple montrant la diff√©rence entre SEGMENT (planaire)
# et OPTIMAL (pas forc√©ment planaire) m√™me pour des points
# en position convexe:
#
# init_seed(1993) # fixe SEED
# N = 7 # nombre de points
# POINTS = generate_convex(N) # points en position convexe
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = SEGMENT()
# draw_all('segment',x,T)
# x,T = OPTIMAL()
# draw_all('optimal',x,T)

# Exemple qui croise avec 4 points (hors 1√®re ar√™te) pour
# OPTIMAL en position convexe:
#
# init_seed(5687) # fixe SEED
# N = 4 # nombre de points
# POINTS = generate_convex(N) # points en position convexe
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# arbre de forme contr√¥l√© ...
#
# init_seed() # fixe SEED
# x = 0.1
# h = 20
# POINTS = [(0,0), (0,h), (x,1), (h-1,1), (-x,3), (-h+3,3), (x,5), (h-5,5), (-x,7), (-h+7,7), (0,0)]
# N = len(POINTS)-1
# ROOT = N
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# 8 points en deux carr√©s de rayon diff√©rents
# r2 = 0.5, 0.8 ou 0.9 donnent des solutions assez diff√©rentes
# init_seed() # fixe SEED
# n = 4 # cot√© du polygone
# N = 2*n
# r1, r2 = 1.0, 0.5
# POINTS = []
# for i in range(n):
#     POINTS += [(r1*cos(i*2*pi/n),r1*sin(i*2*pi/n))]
#     POINTS += [(r2*cos(i*2*pi/n+pi/n),r2*sin(i*2*pi/n+pi/n))]
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# Exemple avec 3 croisements (hors 1√®re ar√™te) pour
# OPTIMAL en position convexe:
#
init_seed(3906) # fixe SEED
N = 11 # nombre de points
POINTS = generate_convex(N) # points en position convexe
normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
x,T = OPTIMAL()
print(T)
draw_all('convex pts')
draw_all('optimal',x,T)
# T = [11, [5, [6, [7, [8, [9], [10]], [4]], [3, [2]]], [0, [1]]]]
T = [11, [5, [6, [7, [8, [9], [10]], [4]], [0, [1]]], [3, [2]]]]
draw_all('???????',x,T)
quit()

# Exemple montrant la diff√©rence entre GREEDY_SEGMENT et OPTIMAL
# pour des points en position g√©n√©rale:
#
# init_seed(1620) # fixe SEED
# N = 11 # nombre de points
# POINTS = generate_von_mises(N,0.5) # points uniforme sur le disque
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = GREEDY_SEGMENT()
# draw_all('greedy_seg',x,T)
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# init_seed() # fixe SEED
# N = 17 # nombre de points
# x,T = SEGMENT_CM(N) # N = nb de points du cercle
# POINTS = generate_regular_polygon(N) # cercle uniforme
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# T = convert_tree(1,T,N) # converti en arbre enracin√© au point 1 du cercle [0,N[
# T = [ROOT, [0, T]] # ajoute le point central et le point 0 du cercle √† l'arbre
# draw_all('segment_cm',x,T)
# quit()

# init_seed() # fixe SEED
# N = 8 # nombre de points
# x,T = SEGMENT_C(N) # N = nb de points du cercle
# POINTS = generate_regular_polygon(N) # cercle uniforme
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# T = convert_tree(0,T,N) # converti en arbre enracin√© au point 0 du cercle [0,N[
# T = [ROOT, T] # ajoute le point central √† l'arbre
# draw_all('segment_c',x,T)
#quit()

# init_seed() # fixe SEED
# N = 8 # nombre de points
# POINTS = generate_regular_polygon(N) # cercle uniforme
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# SEED = - 1
# PROCESS_TIME = 0
# draw_all()
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# x,T = SEGMENT()
# draw_all('segment',x,T)
# quit()

# init_seed() # fixe SEED
# N = 11 # nombre de points
# POINTS = generate_convex(N) # points en position convexe
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = SEGMENT()
# draw_all('segment',x,T)
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
# quit()

# init_seed() # fixe SEED
# N = 11 # nombre de points
# POINTS = generate_von_mises(N,0.5) # points uniforme sur le disque
# normalize_bc() # ajoute le centre ROOT = (0,0) en fin de liste
# x,T = GREEDY_SEGMENT()
# draw_all('greedy',x,T)
# x,T = OPTIMAL()
# draw_all('optimal',x,T)
#quit()

x = 3.570593145854709
T = [0, [4, [3, [8, [2]], [7]], [5, [1], [6]]]]
POINTS = [(0.0, 0.0), (-0.9985549564600698, 0.011827106584179929), (-0.006175724711713601, -0.9996790979426582), (0.9996797961518151, 0.018006435511381674), (0.7213105266396888, 0.6916888441126671), (-0.7102685631588145, 0.7017728500934621), (-0.040494833692801824, 0.9979330572465028), (-0.6851648746614944, -0.7272314994841055), (0.7196686298933903, -0.69431769612143)]
draw_all('toto',x,T)
quit()

# cherche le pire des cas pour N=8
n = 8 # T_segment_c(8)=3.613
ROOT = 0 # source pour POINTS

xmax = 0
for i in range(10000):
    # POINTS = generate_von_mises(n,0.1,2,20) # proche du polygone r√©gulier
    POINTS = generate_von_mises(n,0)
    normalize_bc()
    x,T = OPTIMAL()
    if x>xmax:
        xmax,Tmax,Pmax = x,T,POINTS
        print(f"x = {x}")
        print(f"T = {T}")
        print(f"POINTS = {POINTS}")

# generate_von_mises(8,0,8,10): max sur 10,000
# x = 3.570593145854709
# T = [0, [4, [3, [8, [2]], [7]], [5, [1], [6]]]]
# POINTS = [(0.0, 0.0), (-0.9985549564600698, 0.011827106584179929), (-0.006175724711713601, -0.9996790979426582), (0.9996797961518151, 0.018006435511381674), (0.7213105266396888, 0.6916888441126671), (-0.7102685631588145, 0.7017728500934621), (-0.040494833692801824, 0.9979330572465028), (-0.6851648746614944, -0.7272314994841055), (0.7196686298933903, -0.69431769612143)]

# generate_von_mises(8,0.1): maximum sur 10,000
# (croisements de fous ...)
# x = 3.0498501436246337
# T = [0, [3, [1, [8, [2]], [7]], [5, [4], [6]]]]
# POINTS = [(0.0, 0.0), (-0.38313149525860823, -0.8944996655519788), (0.24967021557384517, 0.9683309266233882), (-0.1987667780636083, -0.8715771404052549), (-0.9335487858180874, 0.25552358830278954), (-0.6785219343019202, -0.6434257547307705), (0.8959422895728233, -0.26045916474825553), (0.7954899585093611, 0.5057387380199572), (0.2528665297861946, 0.9403684724901246)]

x,T,POINTS = xmax,Tmax,Pmax
draw_all('optimal',x,T)

"""
STRAT√âGIE et ANALYSE du r√©veil de n robots plac√©s de mani√®re quelconque sur un cercle, avec un robot suppl√©mentaire r√©veill√© au centre.

Les robots sont en position p_0, p_1, ... p_{n-1} sur le cercle orient√©s dans le sens positif. On s'inspire des arbres calcul√©s par SEGMENT_CM, qu'on appellera planaires monotones m√™me si le terme peut √™tre trompeur. Cela ne marche pour l'instant que si n >= 15, mais cela ne suppose pas le sch√©ma existant en 10.1. La solution est planaire et monotone. Elle donne donc aussi une borne sup√©rieure √† la performance de SEGMENT (pour des points sur un cercle). La solution est calculable en temps O(n), une fois les points ordonn√©s sur le cercle. Sinon, je ne vois pas bien comment faire en moins que n*log(n), car sans ordre, pas facile de suivre les points sur le bord du cercle s'ils ne sont pas ordonn√©s. Ce qui prend O(n) c'est surtout le calcul de p_i (l'indice i). Pour p_k, je pense qu'on peut faire par dichotomie. Comme on va le voir, la preuve s'√©tend au cas g√©n√©ral des points en position convexe, tout simplement car on peut se ramener au cas sur le cercle.

Pour deux points u,v du cercle, on note [u,v] l'arc orient√© allant de u √† v dans ce sens. On notera arc(u,v) la longueur de l'arc [u,v], et chord(u,v) la longueur de la corde qui vaut 2*sin(arc(u,v)/2).

----------------------------------------------------------------------------------------------------

√âTAPE 1. Choisir un robot p_i tel que arc(p_{i-1},p_{i+1}) <= 4ùúã/n. C'est toujours possible, car la somme √† n termes sum_{i=1}^n arc(p_{i-1},p_{i+1}) = 4ùúã (indices modulo n) puisque chaque arc est compt√© deux fois. Un terme est donc en dessous de la moyenne.

    En fait, on voudrait plut√¥t un r√©sultat qui disent qu'il existe toujours un i tel que le max{ arc(p_{i-1},p_i), arc(p_,p_{i+1}) } <= cùúã/n avec c<4. Mais on ne peut pas dire mieux que c=4, car en prennant n=2k, dont k points doubles p_{2i} = p_{2i+1} (ou points infiniment proches), plac√©s sur un k-gone r√©gulier montrent que lorsqu'on prend trois points cons√©cutifs, l'arc maximum sera 2ùúã/k = 4ùúã/n. Par contre, on verra √† la fin de l'analyse (v3) que c > 1.952 (car sinon on peut montrer que la borne est vraie). Notons qu'on peut toujours supposer qu'il n'existe pas de points multiples puisque les points multiples ne peuvent pas produire une strat√©gie optimale plus lente que sans les points multiples dans la mesure o√π en temps nul on peut informer tous les robots plac√©s au m√™me point.

√âTAPE 2. R√©veiller p_i puis p_{i+1} et p_{i-1}. On va maintenant appliquer la m√™me strat√©gie en parall√®le sur chaque moiti√© de cercle. On ne d√©crit que la strat√©gie de p_{i+1} qu'on supposera la plus longue.

    C'est pour appliquer cet argument ("p_{i+1} est la branche la plus longue") qu'on a besoin des trois points sp√©cifiques p_i, p_{i+1} et p_{i-1}. Si on avait pris les deux points les plus proches, disons p_i et p_{i+1} √† distance <= 2ùúã/n, alors la strat√©gie en p_i et p_{i+1} ne serait pas la m√™me, m√™me en choisissant la meilleure des deux entre informer d'abord p_i puis p_{i+1} ou le contraire. Il faudrait donc consid√©rer deux cas. Prendre trois points cons√©cutifs proches semble donc plus simple √† analyser. C'est bien dommage car si l'on remplace 4ùúã/n par 2ùúã/n dans la formule finale, alors on prouve la borne souhait√©e pourtout n.

√âTAPE 3. Soient B le point du cercle oppos√© √† p_i et A le point de la moiti√© contenant p_{i+1} tel que l'arc [A,B] = t0 = ùúã-2‚àö2 < 0.3132. Soit p_k le dernier point (avec un robot) de l'arc [p_i,A].

    On augmentera plus tard t0 un peu pour le faire d√©pendre de n, plus pr√©cis√©ment du nombre de robots dans [p_i,A]. Notons que A,B sont des points √©ventuellement sans robot. Le cas k = i+1 est possible.

√âTAPE 4. Un robot en p_{i+1} se charge de r√©veiller tous les robots de [p_{i+1},p_k]. Il peut le faire en suivant le bord.

    On pourrait raffiner ici un peu en r√©appliquant la strat√©gie sur l'arc [p_{i+1},p_k], produisant alors un nouvel angle critique t1 et deux sous-√©tapes.

√âTAPE 5. Si l'arc ]A,B] n'est pas vide, alors le second robot en p_{i+1} r√©veille p_{k+1} puis tous ceux de ]A,B]. Il peut le faire en suivant le bord.

    Comme dans le cas pr√©c√©dant, on pourrait raffiner en r√©appliquant la strat√©gie sur l'arc ]A,B] depuis p_{k+1}, produisant alors un nouvel angle critique t1 et potentiellement d'autres sous-√©tapes.

----------------------------------------------------------------------------------------------------

ANALYSE (v1): Clairement, la solution produit un arbre planaire et monotone.

Cas 1: ]A,B] est vide. Comme les branches sont monotones, on r√©veille tout point p_j de l'arc [p_i,p_k] en au plus 1 + arc(p_i,p_j) <= 1 + arc(p_i,p_k) <= 1 + ùúã-t0 = 1 + ùúã - (ùúã-2‚àö2) = 1+2‚àö2, ce qui prouve la borne dans ce cas.

Cas 2: ]A,B] n'est pas vide. Il y a deux types de branches √† analyser. Celles qui r√©veillent les points de l'arc [p_i,p_k], correspondent au cas 1, et donc v√©rifient la borne. Pour second type, la longueur est au plus

    1 + chord(p_i,p_{i+1}) + chord(p_{i+1},p_{k+1}) + arc(p_{k+1},B)        (1)

Par ailleurs on a:
. chord(p_i,p_{i+1}) <= arc(p_i,p_{i+1}) <= 4ùúã/n
. chord(p_{i+1},p_{k+1}) <= 2
. arc(p_{k+1},B) <= t0

C'est au plus 4ùúã/n + 3 + t0, ce qui est <= 1+2‚àö2 d√®s que n > 4ùúã/(2‚àö2-2-t0) = 4ùúã/(4‚àö2-2-ùúã) ~ 24.4. La borne est donc d√©montr√©e d√®s que n >= 25.

ANALYSE (v2). On peut cependant √™tre moins grossier dans les divers majorants ci-dessus. Si on pose x = arc(p_i,p_{i+1}) et y = arc(p_{k+1},B), la branche du second type vaut au plus

    1 + x + chord(p_{i+1},p_{k+1}) + y
    = 1 + x+y + 2sin((ùúã-(x+y))/2)
    = 1 + x+y + 2cos((x+y)/2), car sin(ùúã/2-u) = cos(u) pour tout u
    = 1 + z + 2cos(z/2) avec z=x+y <= 4ùúã/n + t0

En tra√ßant la courbe de la fonction f: z -> 1+z+2cos(z/2) - (1+2‚àö2), on s'aper√ßoit qu'elle est croissante et n√©gative sur [0,z0) pour un certain z0 ~ 1.150093216. Comme z <= 4ùúã/n + t0, pour que f(z) soit n√©gative et que la borne soit prouv√©e, il suffit donc de que 4ùúã/n + t0 <= z0, ce qui implique n >= 4ùúã/(z0-t0) ~ 15.1. La borne est donc d√©montr√©e d√®s que n >= 16.

    NB. On perd un peu sur x, qu'on pourrait remplacer par 2sin(x/2). Mais si on le fait, on perd le changement de variable avec z permettant de supprimer x et y. On perd aussi sur y qui devrait √™tre plut√¥t quelque chose entre 2sin(y/2) et y, valeur d√©pendant du nombre de robots dans ]A,B]. Le nombre de points dans ]A,B] est au plus n-3 (manquent p_{i-1},p_i,p_{i+1}, k=i+1 √©tant possible), soit n-2 arcs. En appliquant les formules d'addition des sinus, on peut remplacer y par 2*(n-2)*sin(y/(2(n-2))) <= y. Du coup on pourrait remplacer z = x+y par 2sin(x/2) + 2(n-2)sin(z/(2(n-2))) <= 4(n-2)sin(z/(4(n-2))) <= z.

ANALYSE (v3). On peut encore gratter pour n "petit" comme suit. Supposons qu'on ait k+1 points u_0...u_k r√©partis sur un demi-cercle, d√©limitant k angles. (NB: il faut un demi-cercle car la corde vaut alors 2sin(t/2) o√π t est l'angle de la corde, ce qui est une fonction croissante lorsque t/2 est dans [0,ùúã/2], soit t dans [0,ùúã], soit le demi-cercle. Le fontion est concave pour tout t/2 dans [0,ùúã], mais on s'en fout.) Que vaut la somme des cordes, S = sum_{i=0..k-1} chord(u_i,u_{i+1}) ? Dans l'analyse, on majore S par L = arc(u_0,u_k), la somme des arcs. Mais l'intuition est que la somme des k cordes est maximis√©e quand les points sont uniform√©ment r√©partis (c'est vrai au moins pour un nombre impaire de points, soit un nombre paire de cordes, cf. Proposition ci-apr√®s). Dit autrement, S = sum_{i=0..k-1} 2sin(arc(u_i,u_{i+1})/2) <= 2k sin(L/(2k)) ce qui est un peu moins que L surtout lorsque k est petit. Il faudrait donc injecter ceci dans l'analyse et jouer avec t0.

PROPOSITION (Somme des sinus). Soient {a_i} une suite de k angles positifs de somme au plus 2ùúã. Alors,

    sum_i sin(a_i)/k <= sin( sum_i a_i/k )

PREUVE (du cas pair). Soit k=2p un entier pair. La propri√©t√© est trivialement vraie pour p=0 (on a bien 0 <= 0). On coupe la somme en deux deux sommes de p termes, en posant x = sum_{i=1}^p a_i et y = sum_{i=p+1}^{2p} a_i. On a la formule bien connue d'addition des sinus: sin(x) + sin(y) = 2sin((x+y)/2) * cos((x-y)/2). Si x,y>=0 et 0 <= x+y <= 2ùúã, alors sin(x) + sin(y) <= 2sin((x+y)/2). En effet, dans ces conditions (x+y)/2 <= ùúã, ce qui implique que sin((x+y)/2) ‚àà [0,1]. Et bien s√ªr cos((x-y)/2) <= 1. En coupant en deux la somme, par induction et en appliquant le formule d'addition des sinus, il vient:

    sum_i sin(a_i) = sum_{i=1}^p sin(a_i) + sum_{i=p+1}^{2p} a_i         (on coupe en deux)
                   <= p*sin(x/p) + p*sin(y/p)                            (induction)
                   <= 2 (p*sin((x/p+y/p)/2)) = 2p * sin((x+y)/(2p))      (formule)
                   = k * sin( sum_i a_i/k )
QED

Je ne sais pas comment le prouver pour un nombre impaire de termes. Est-ce que cela d√©coule de la concavit√© (car sin"(x) = cos'(x) = -sin(x) < 0 sur l'intervalle [0,ùúã[), et dire simplement que la moyenne d'une fonction concave est plus petite que la fonction de la moyenne ? Faut-il virer l'angle le plus grand ou du plus petit de la somme ? Des tests num√©riques avec Maple (plot3d) montrent que c'est vrai pour 3 angles. Mais a priori, cette formule est connue et peut √™tre d√©duite de la formule Jensen et de la concavit√© de la fonction sinus ... (d'apr√®s https://les-mathematiques.net/vanilla/index.php?p=discussion/comment/1021853#Comment_1021853). La formule de Jensen fait le lien entre les z√©ros d'une fonction analytique (c'est-√†-dire une fonction d√©veloppable en s√©rie enti√®re sur des points du plan, style exp(), cos(), sin() etc.) sur des points du disque unit√© et sur le cercle unit√©. Je pr√©f√©rerai une preuve avec des mots que je comprends.

L'in√©galit√© de Jensen √©tablit une relation entre la moyenne de valeurs d'une fonction convexe et la valeur de la moyenne des valeurs: https://fr.wikiversity.org/wiki/Fonctions_convexes/Applications_de_l%27in√©galit√©_de_Jensen. On en d√©duit le r√©sultat pour les fonctions concaves et donc pour sinus. Rappelons qu'une fonction f(x) est concave ssi -f(x) est convexe. Il suffit donc d'inverser les signes des in√©galit√©s.

On raffine maintenant la d√©finition de t0 pour la faire d√©pendre de n. On red√©finit l'angle t0 tel que 2*(n-2)*sin((ùúã-t0)/(2*(n-2))) = 2‚àö2. Cela revient √† poser t0 = ùúã - 2*(n-2)*arcsin(‚àö2/(n-2)). Notons que t0 > ùúã-2‚àö2 (en fait c'est sa limite), car pour tout x>0, arcsin(x) < x. On a m√™me x/(1+x^2) < arcsin(x), mais on s'en fout.

Pour le cas 1, la longueur de branche est <= 1 + sum_{j=i..k-1} chord(p_j,p_{j+1}) = 1 + sum_j 2sin(arc(p_j,p_{j+1})/2). Le nombre de termes de cette somme est au plus k <= n-2, car au moins deux arcs entre p_k et p_i (incluant le point p_{i-1}) ne sont pas compt√©s. Cette somme vaut donc au plus 1 + 2*(n-2)*sin((ùúã-t0)/(2*(n-2))) = 1 + 2‚àö2 par d√©finition de t0 (si la formule de la somme des sinus est bien vraie pour le cas impaire).

NB. On doit pouvoir dire mieux sur le nombre de points k dans la 1√®re branche (et gratter sur le "n-2" dans la d√©finition de t0), car s'il n'y a qu'un seul point (p_{i-1}) dans la 2e partie, alors la longueur de cette branche serait <= dist(p_i,B) <= 2. Or on veut seulement prouver une longueur <= 2‚àö2, ce qui laisse une peu de marge. En fait, la longueur de branche de la 2e partie est au plus la longueur du plus long p√©rim√®tre maximum avec disons m arcs, soit 2m*sin(ùúã/(2m)). Il doit √™tre <= 2‚àö2. C'est vrai si m <= 2.

Pour le cas 2, on a d√©j√† vu que pour que f(z) soit n√©gative, et que la longueur de branche soit <= 1+2‚àö2, il suffit que 4ùúã/n + t0 <= z0. Notons que z0 ne d√©pend pas de la d√©finition de t0. Donc

    4ùúã/n + t0 <= z0  <=>  4ùúã/n + ùúã - 2*(n-2)*arcsin(‚àö2/(n-2)) < 1.150093216

D'apr√®s le graphe de la fonction g: n -> 4ùúã/n + ùúã - 2*(n-2)*arcsin(‚àö2/(n-2)), la plus petite valeur de n telle que g(n) < z0 est n ~ 14.91. La borne est donc prouv√©e d√®s que n >= 15. Notons que si on remplace "n-2" dans t0 par "n/2" par exemple, alors la borne est encore n >= 15 (n ~ 14.70). Et si dans la d√©finition de z0 on remplace z+cos(z/2) par 2(n-2)sin(z/(2(n-2))) et n=13 par exemple, alors z0 est presque identique ~ 1.15.

De mani√®re int√©ressante, on peut obtenir une borne inf√©rieure sur l' arc contenant p_i, soit L = arc(p_{i-1},p_{i+1}) <= 4ùúã/n. En effet, si on remplace dans g(n) le terme 4ùúã/n par L, on s'aper√ßoit que la borne de 1+2‚àö2 est v√©rifi√©e d√®s que L <= 1.952 ùúã/n. Plus pr√©cis√©ment, on obtient que g(n) < z0 d√®s que n > 6.999903280, ce qui suffit car c'est d√©j√† vrai pour n = 7. Du coup, on pourrait se concentrer sur le cas L > 1.952 ùúã/n. √Ä voir si en revisitant la preuve cela aide. 

ANALYSE (v4 - TOTO).

Id√©e 1. On peut gratter sur la majoration chord(p_i,p_{i+1}) <= arc(p_i,p_i+1) <= 4ùúã/n, car le p√©rim√®tre d√©fini par les points de P est moins que 2ùúã, surtout lorsque n est petit. Donc, il faudrait prendre comme majorant plut√¥t 2P(n)/n o√π P(n) est le p√©rim√®tre maximum d'un n-gone non-r√©gulier inscrit dans un cercle de rayon unit√©. D'apr√®s la proposition du p√©rim√®tre maximum, il vaut P(n) <= 2n*sin(ùúã/n). On peut donc remplacer partout chord(p_i,p_{i+1}) <= 4ùúã/n par chord(p_i,p_{i+1}) <= 4sin(ùúã/n) <= 4ùúã/n. Il faut refaire tous les calculs pour voir si on peut ainsi affiner les divers majorants.

Id√©e 2. On pourrait faire des bornes plus fines (que 1+2‚àö2 pour n=4) on consid√©rant le cas de l'exploration de non pas d'un demi-cercle [0,ùúã], mais d'un arc de cercle quelconque [0,t] avec t <= ùúã. La constante ùúã devient alors t et la constante c = 2‚àö2 pourrait devenir (peut-√™tre) la somme maximum de deux cordes avec un point dans [0,t], soit c(t) = 2*(2sin(t/2)) = 4sin(t/2). Notons que pour t=ùúã on a c(ùúã) = 2‚àö2. Est-ce qu'un bon majorant serait 1 + c(4ùúã/n) = 1 + 4sin(2ùúã/n) ?

Id√©e 3. Pour la partie [p_{i+1},A] on peut utiliser un sous-arbre binaire de hauteur ceil(log(n-2)) en supposant un arbre montone optimal (cf. PROPOSITION "un fils"). Normalement, on gagne 1 sur le n minimum √† partir duquel cela est vrai, donc passant √† n >= 14. √Ä confirmer avec l'Id√©e 4 qui semble dire que cela n'est pas si clair que cela.

PROPOSITION (n<=7). On a bien un arbre de profondeur au plus 1+2‚àö2 pour n <= 7 points plac√©s sur un cerle unit√© (source au centre).

PREUVE. Notons q_i le point diam√©tralement oppos√© au point p_i. Il existe toujours un point p_i tel que l'axe [p_i,q_i] coupe en deux l'ensemble des points. S'il y a des points confondus en p_i ou q_i, on peut r√©partir chaque demi-cercle de sorte qu'il y a au plus n/2 points de part et d'autres de p_i. En particulier, pour n <= 7, il y aura 3 points au plus dans chaque demi-cercle.

Pour voir qu'on peut couper en deux, on consid√®re un axe [p_i,q_i] et on affecte les points √† chaque demi-cercle: x(i) est le nombre de points en tournant √† droite de p_i et y(i) le nombre de points affect√© en tournant √† droite de q_i. S'il y a des points multiples o√π diam√©tralement oppos√©s, on les r√©partis au mieux en cassant la sym√©trie vers le demi-cercle √† droite par exemple. S'il n'y a pas √©quilibre, on tourne l'axe √† droite jusqu'√† atteindre un nouveau point qui est soit p_{i+1}, soit q_j pour un certain j. √Ä chaque mouvement, on peut s'arranger pour que x(i) √©volue d'au plus d'une unit√©. D'autre part, apr√®s un demi-tour, disons un d√©part en p_i et une arriv√©e en q_i, x(i) et y(i) ont des valeur invers√©es. Il suit qu'√† un moment donn√© |x(j)-y(j)| <= 1 pour un certain j. 

On choisit p_i qui coupe en deux le nombre n de points, donc avec 3 points au maximum dans chaque demi-cercle (en enlevant p_i). Dans chaque demi-cercle un arbre de hauteur deux suffit, donc de longueur au plus 2‚àö2. Cela fait donc au plus 1+2‚àö2.
QED.

Reste donc les cas avec n=8,9,10,11,12,13.

PROPOSITION (Cercle majorant). Soit P un ensemble de n points en position convexe et une source s (pas dans P) √† distance au plus un de tous les points de P. Alors il existe un ensemble P' de n points plac√© sur le cercle de rayon unit√© et de centre s tel que OPT(P',s) >= OPT(P,s).

    C'est vrai pour L_2, mais peut-√™tre g√©n√©ralisable pour d'autre m√©trique. C'est vrai pour L_1 et L_max car les cercles sont des carr√©s et les enveloppes convexes sont des rectangles. La transformation de P en P' est alors trivial. Notons que dans la d√©finition d'un ensemble convexe, il faut que TOUS les plus courts chemins entre deux points soient dans le convexe.

PREUVE. Soit P = (p_0,...,p_{n-1}) les points en position convexe ordonn√©s selon l'envelopper convexe dans le sens direct. Sans perte de g√©n√©ralit√©, en d√©calant P et s d'un certain vecteur, on peut supposer que s est plac√©e au centre d'un cercle de rayon unit√© contenant P. On va aussi supposer n >= 3, puisque pour 1,2 le r√©sultat est trivial avec P'=P, OPT(P,s) = dist(s,{p_0}). Donc chaque point p_i a un successeur, p_{i+1} et pr√©d√©cesseur p_{i-1}, les indices √©tant modulo n.

Pour chaque point p_i de P, on d√©finit la demi-droite D_i^- (resp. D_i^+) issue de p_i obtenue en effectuant une rotation autour de p_i de ùúã/4 (resp. -ùúã/4) du segment [p_i,p_{i-1}] (resp. [p_i,p_{i+1}]). Enfin, on pose cone(p_i) la r√©gion d√©limit√©e par les demi-droites D_i^- et D_i^+.

La propri√©t√© fondamentale des cones ainsi d√©finis est:

        pour tout p_i, p_j de P, dist(cone(p_i),cone(p_j)) >= dist(p_i,p_j)

C'est li√©e √† la convexit√© de P. Supposons j>i. La demi-droite D_i^+ est le 2e bord de cone(p_i) (2e par rapport au sens direct, D_i^- √©tant le 1er) alors que D_j^- est le 1er bord de cone(p_j). √Ä cause de la convexit√© de P, les demi-droites D_i^+ et D_j^- forment un angle > 0 (il est √©gale √† 0 si j=i+1). Si l'angle √©tait < 0, les points entre p_i et p_j ne pourraient √™tre en position convexe. Donc cone(p_i) et cone(p_j) ne peuvent intersecter la bande d√©limiter par ces deux demi-droites et le segment [p_i,p_j]. Leur distance est donc au moins dist(p_i,p_j), la longueur du segment [p_i,p_j].

On calcule P' de la mani√®re suivante: pour chaque i, p'_i est n'importe quel point situer √† l'intersection du cercle unit√© et centr√© sur s avec cone(p_i). Les points de P' sont donc sur le cercle unit√© centr√© sur s. Soit T' l'arbre solution optimal pour (P',s). On construit l'arbre T pour (P,s) √† partir de T' en rempla√ßant chaque p'_i par p_i. Notons que p'_i est dans cone(p_i) et p'_j dans cone(p'_j). La profondeur de T est n√©cessairement <= profondeur de T car pour chaque ar√™te du type p'_i-p'_j de T', dist(p_i,p_j) <= dist(p'_i,p'_j) √† cause de la propri√©t√© sur les cones. Et donc l'ar√™te p_i-p_j dans T est plus courte. Enfin, c'est aussi vrai pour la 1√®re ar√™te de l'arbre de T, soit s-p_i pour un certain i, car dist(s,p_i) <= 1 par hypoth√®se alors que dist(s,p'_i) = 1 par construction. C'est vrai pour toutes les ar√™tes de T.
QED

On va montrer un r√©sultat int√©ressant, qui semble aussi connu, mais avec des preuves plus ou moins foireuses, comme soulign√© par https://les-mathematiques.net/vanilla/index.php?p=discussion/comment/1021853#Comment_1021853). Elle d√©coule de la proposition du "cercle majorant".

PROPOSITION (P√©rim√®tre maximum d'un polygone non-r√©gulier). Soit P un ensemble de points en position convexe dans le disque de rayon unit√©. Alors le p√©rim√®tre de P est au plus 2|P|*sin(ùúã/|P|), ce qui est atteint pour un polygone r√©gulier.

SKETCH DE PREUVE. La premi√®re partie consiste √† pousser, depuis le centre du cercle contenant P, les points qui ne sont pas d√©j√† sur le cercle et de dire que le p√©rim√®tre a augment√©. Il faut utiliser la m√™me transformation que dans la proposition du "cercle majorant" bas√© sur l'in√©quation des cones dans le cas limit√© de p_i et p_{i+1}. Ensuite, on applique la proposition sur la somme des sinus, puisque le p√©rim√®tre n'est qu'une somme de longeur de corde ou encore de sinus. C'est apparemment la deuxi√®me √©tape qui n'est pas facile √† d√©montrer de mani√®re g√©om√©trique, c'est-√†-dire sans le r√©sultat analytique sur la somme des sinus, car la plupart des modifications g√©om√©triques, qui sont locales, ne permettre pas d'atteindre tous les polygones r√©guliers.
QED

Id√©e 4. Malheureusement, on ne peut pas extrapoler le r√©sultat sur le p√©rim√®tre pour la profondeur des arbres, m√™mes s'ils sont planaires et monotones. La longueur des branches est effectivement des sommes de sinus <= 2ùúã, d'angles positifs s'ils sont monotones et de somme <= 2ùúã, mais on doit consid√©rer le max de plusieurs branches, soient max{ sum_i sin(a_i), sum_j sin(b_j) }. Ces branches ont en g√©n√©ral qu'un court pr√©fixe et des branches ayant << n points. D'ailleurs, la proposition "un fils" affirme qu'un arbre optimal est de hauteur ceil(log_2(n)) [C'est faux]. Aucune raison que le max soit atteint pour a_i = b_j = 2ùúã/n. Ceci dit, pour un arbre solution binaire complet (sauf la racine), donc avec n = 2^k points (en comptant la source), on peut peut-√™tre dire quelque chose ... En tout cas, il est faux de dire que pour n = 2^k points, l'arbre optimal est n√©cessairement binaire complet (cf. contre-exemple ci-dessus).

Id√©e 5. On pourrait modifier les arbres pour les rendre moins profonds, quitte √† supposer n plus grand, disons n >= 8. Dans le ]A,B] non vide, au lieu d'informer p_{k+1}, on pourrait viser un p_j (j>k) proche du "milieu" de ]A,B] et profiter de la longueur du dernier arc ]p_j,B] pour informer en parall√®le l'arc ]A,p_j[. L'arbre est encore planaire mais plus monotone, mais cela pourrait potentiellement permettre d'augmenter encore un peu l'angle t0 pour que les branches p_{i+1} - p_k, p_{i+1} - p_{k+1} - A et p_{i+1} - p_{k+1} - B soient a peu pr√®s de m√™me longueur. Notons que pour que l'arbre solution puisse faire un branchement (binaire) il faut atteindre un robot. Viser un point sans robot est possible, mais il ne permet pas de faire de branchement.

Id√©e 6. Cela serait cool de montrer que pour n points sur un cercle, le pire des cas est le cas uniforme. Ce n'est pas si clair que cela, bien que les exp√©riences montrent que cela semble vrai. La difficult√© est qu'on ne peut pas se baser sur une preuve qui transformerait les points initial P en points uniforme P' tout en augmentant les distances et en gardant l'ordre cyclique des points (donc avec la transformation inverse on en d√©duit un arbre optimal plus court pour P que pour P'). Le probl√®me vient que pour certains points en position convexe il peut y avoir des croisements. Ceci dit on avait le probl√®me avant, et la preuve marche pourtant ...

Id√©e 7. Cela serait cool de montrer que le pire cas est pour n>=4 pair. L'id√©e est que lorsque n est pair, on ne peut pas avoir un arbre binaire complet. On peut donc enlever un point et se ramener au cas impair ... [√Ä VOIR].

CONJECTURE (Parit√©). Pour tout entier k>=1, alpha(2k-1) <= alpha(2k), o√π alpha(n) est la profondeur optimale de tout ensemble de n points du plan (euclidien), hors la source, √† distance <= 1 de la source.

On aimerait bien aussi d√©montrer que pour k>=2, alpha(2k+2) < alpha(2k) et alpha(2k+3) < alpha(2k+1), mais rien n'est moins s√ªr √† la vue des anomalies de T_segment(n) (pour n points uniformes sur un cercle) vers n = 60,...,66.

La conjecture semble v√©rifi√©e pour les points uniform√©ment distribu√©s sur un cercle. Cela ne prouve rien bien s√ªr. On remarque que lorsque n=2k est pair, il y a forc√©ment un sommet de l'arbre qui est de degr√© deux. Id√©e pour prouver cette conjecture. On choisit un ensemble P de n=2k-1 points en positions critiques, c'est-√†-dire dont l'arbre optimal T est de profondeur alpha(n). On pose r = alpha(n)-alpha(n+1) - eps avec eps>0 assez petit. On suppose (par l'absurde) que r>0. On choisit d'ajouter un point p' √† cet l'ensemble, passant √† n+1 points. On calcule alors l'arbre T' optimal pour ces n+1 points. On supprime p' de T' qu'on tranforme en un arbre T'' pour l'ensemble initial P avec depth(T'') <= depth(T')+r.

C'est une contradiction car d'une part: alpha(n) <= depth(T''), et d'autre part depth(T')+r = alpha(n+1) + alpha(n)-alpha(n+1)-eps = alpha(n) - eps < alpha(n), soit alpha(n) < alpha(n). Il faut donc deux √©tapes: (1) ajouter p'; (2) transformer T' en T'' en supprimant p'. On peut placer p' √† distance r d'un des points de P, typiquement sur une ar√™te u-v de l'arbre optimal T. Si dans T', deg(p') = 1, alors on peut supprimer p' qui est une feuille, et T'' est un arbre de profondeur <= depth(T). Si deg(p') = 2, alors on peut ajouter une ar√™te entre ses deux voisins pour obtenir un arbre T'' de profondeur <= depth(T). Reste donc le cas o√π deg(p')=3. Si deux des trois voisins de p' dans T' sont u et v, alors on peut contracter l'ar√™te p'-u ou p'-v de longueur r et obtenir un arbre T'' pour P de profondeur <= depth(T')+r. Le cas probl√©matique est donc lorque p' poss√®de 3 voisins dans T' sans contenir u et v. Bien s√ªr cela reste vrai pour tout placement de p' autour de u (et √† distance <= 1 de s). 

Le probl√®me est qu'on ne peut pas dire grand chose sur les ar√™tes qui doivent ou ne doivent pas √™tre dans un arbre optimal, m√™me (et surtout) lorsque les points sont sur un cercle de rayon 1. On aimerait bien pouvoir dire par exemple que u-v sont dans l'arbre optimal (o√π qu'il existe un arbre optimal qui contient u-v) si u et v sont les plus proches. Mais c'est faux. Les deux points les plus proches ne sont pas (leur ar√™te) forc√©ment l'arbre optimal, m√™me s'ils sont align√©s: 1--s----2-----3. L'arbre optimal est s->2->{1,3} de profondeur 10. L'arbre contenant s->1->{2,3} serait de profondeur 11. On peut aussi imaginer trois points 1,2,3 qui forment un Y depuis s (avec la fourche en 1) mais avec 2 et 3 tr√®s tr√®s proches. On peut m√™me imaginer que 1,2,3 soient sur un cercle de rayon 1 de centre s. Autre exemple: il est possible que les deux points les plus √©loign√©s (leur ar√™te) soient dans l'arbre optimal: A---s---B o√π A et B sont une superposition de n/2 points.
"""
